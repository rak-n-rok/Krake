async def test_update_{{ operation.signature_name }}_tosca(aiohttp_server, config, db, loop, tosca, tosca_pod):
    # MISSING Resource-specific attributes can be set here
    data = {{ operation.body.__name__ }}Factory(
        spec__manifest=[tosca_pod],
        spec__tosca=tosca,
        status__state=ApplicationState.RUNNING,
    )
    await db.put(data)
    # MISSING The resource-specific attributes can be updated here
    # data.spec.foo = bar

    server = await aiohttp_server(create_app(config=config))

    async with Client(url=f"http://{server.host}:{server.port}", loop=loop) as client:
        {{ operation.resource.api }}_api = {{ operation.resource.api|title }}Api(client)
        received = await {{ operation.resource.api }}_api.update_{{ operation.signature_name }}(
            {{ namespace_metadata(operation) }}name=data.metadata.name, body=data
        )

    assert received.api == "{{ operation.resource.api }}"
    assert received.kind == "{{ operation.response.__name__ }}"
    assert data.metadata.modified < received.metadata.modified
    # MISSING Assertions on resource-specific received values.
    # assert received.spec.foo == bar

    stored = await db.get(
        {{ operation.response.__name__ }}, {{ namespace_metadata(operation) }}name=data.metadata.name
    )
    assert stored == received
    # MISSING Assertions on resource-specific updated values.
    # assert data.spec.foo == bar


async def test_update_{{ operation.signature_name }}_csar(aiohttp_server, config, db, loop, csar, tosca_pod):
    # MISSING Resource-specific attributes can be set here
    data = {{ operation.body.__name__ }}Factory(
        spec__manifest=[tosca_pod],
        spec__csar=csar,
        status__state=ApplicationState.RUNNING,
    )
    await db.put(data)
    # MISSING The resource-specific attributes can be updated here
    # data.spec.foo = bar

    server = await aiohttp_server(create_app(config=config))

    async with Client(url=f"http://{server.host}:{server.port}", loop=loop) as client:
        {{ operation.resource.api }}_api = {{ operation.resource.api|title }}Api(client)
        received = await {{ operation.resource.api }}_api.update_{{ operation.signature_name }}(
            {{ namespace_metadata(operation) }}name=data.metadata.name, body=data, multipart=[open(csar_updated, "rb")]
        )

    assert received.api == "{{ operation.resource.api }}"
    assert received.kind == "{{ operation.response.__name__ }}"
    assert data.metadata.modified < received.metadata.modified
    # MISSING Assertions on resource-specific received values.
    # assert received.spec.foo == bar

    stored = await db.get(
        {{ operation.response.__name__ }}, {{ namespace_metadata(operation) }}name=data.metadata.name
    )
    assert stored == received
    # MISSING Assertions on resource-specific updated values.
    # assert data.spec.foo == bar
