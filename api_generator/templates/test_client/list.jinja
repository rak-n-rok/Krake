async def test_list_{{ operation.signature_name }}(aiohttp_server, config, db, loop):
    # Populate database
    data = [
        {{ operation.resource.singular }}Factory(),
        {{ operation.resource.singular }}Factory(),
        {{ operation.resource.singular }}Factory(),
        {{ operation.resource.singular }}Factory(),
        {{ operation.resource.singular }}Factory(),
        {{ operation.resource.singular }}Factory({{ namespace_metadata_namespace(operation) }})
    ]
    for elt in data:
        await db.put(elt)

    # Start API server
    server = await aiohttp_server(create_app(config=config))

    async with Client(url=f"http://{server.host}:{server.port}", loop=loop) as client:
        {{ operation.resource.api }}_api = {{ operation.resource.api|title }}Api(client)
        received = await {{ operation.resource.api }}_api.list_{{ operation.signature_name }}({{ namespace_testing(operation) }})

    assert received.api == "{{ operation.resource.api }}"
    assert received.kind == "{{ operation.response.__name__ }}"

    key = attrgetter("metadata.name")
    assert sorted(received.items, key=key) == sorted(data{{ namespace_sort_all(operation) }}, key=key)


@with_timeout(3)
async def test_watch_{{ operation.signature_name }}(aiohttp_server, config, db, loop):
    data = [
        {{ operation.resource.singular }}Factory(),
        {{ operation.resource.singular }}Factory(),
        {{ operation.resource.singular }}Factory(),
        {{ operation.resource.singular }}Factory({{ namespace_metadata_namespace(operation) }})
    ]

    async def modify():
        for elt in data:
            await db.put(elt)

    server = await aiohttp_server(create_app(config=config))

    async with Client(url=f"http://{server.host}:{server.port}", loop=loop) as client:
        {{ operation.resource.api }}_api = {{ operation.resource.api|title }}Api(client)
        async with {{ operation.resource.api }}_api.watch_{{ operation.signature_name }}({{ namespace_testing(operation) }}) as watcher:
            modifying = loop.create_task(modify())

            async for i, event in aenumerate(watcher):
                expected = data[i]
                assert event.type == WatchEventType.ADDED
                assert event.object == expected

                # '1' because of the offset length-index and '1' for the resource in
                # another namespace
                if i == len(data) - 2:
                    break

            await modifying
