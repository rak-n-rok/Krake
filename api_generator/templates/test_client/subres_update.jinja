async def test_update_{{ operation.signature_name }}(aiohttp_server, config, db, loop):
    # MISSING Subresource-specific attributes can be set here
    data = {{ operation.resource.singular }}Factory()
    await db.put(data)

    # MISSING The subresource-specific attributes can be updated here
    # data.{{ operation.subresource.name|lower }}.foo = bar
    {% if operation.body.__name__ != operation.resource.singular %}
    {{ operation.subresource.name|lower }} = {{ operation.body.__name__ }}()
    {% endif %}

    server = await aiohttp_server(create_app(config=config))

    async with Client(url=f"http://{server.host}:{server.port}", loop=loop) as client:
        {{ operation.resource.api }}_api = {{ operation.resource.api|title }}Api(client)
        received = await {{ operation.resource.api }}_api.update_{{ operation.signature_name }}(
            namespace=data.metadata.namespace, name=data.metadata.name, body={{ "data" if operation.body.__name__ == operation.resource.singular else operation.subresource.name|lower }}
        )

    assert received.api == "{{ operation.resource.api }}"
    assert received.kind == "{{ operation.response.__name__ }}"

    # MISSING Assertions on subresource-specific received values.
    # assert received.{{ operation.subresource.name|lower }}.foo == bar

    stored = await db.get(
        {{ operation.response.__name__ }}, namespace=data.metadata.namespace, name=data.metadata.name
    )
    # MISSING Assertions on subresource-specific updated values.
    # assert received.{{ operation.subresource.name|lower }} == data.{{ operation.subresource.name|lower }}
    # assert received.{{ operation.subresource.name|lower }}.foo == bar
