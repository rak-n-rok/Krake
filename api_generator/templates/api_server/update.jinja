@routes.route(
    "{{ operation.method }}", "{{ operation.path }}"
)
@protected(
    api="{{ operation.resource.api }}", resource="{{ operation.resource.plural|lower }}", verb="update"
)
@use_schema(
    "body", schema={{ operation.body.__name__ }}.Schema
)
@load("entity", {{ operation.response.__name__ }})
async def update_{{ operation.signature_name }}(request, body, entity):
    # Once a resource is in the "deletion in progress" state, finalizers
    # can only be removed.
    if entity.metadata.deleted:
        if not set(body.metadata.finalizers) <= set(entity.metadata.finalizers):
            problem=HttpProblem(
                detail="Finalizers can only be removed if a deletion is in progress.",
                title=HttpProblemTitle.UPDATE_ERROR
            )
            raise HttpProblemError(web.HTTPConflict, problem)

    if body == entity:
        problem = HttpProblem(
            detail="The body contained no update.",
            title=HttpProblemTitle.UPDATE_ERROR
        )
        raise HttpProblemError(web.HTTPBadRequest, problem)

    try:
        entity.update(body)
    except ValueError as e:
        problem = HttpProblem(detail=str(e), title=HttpProblemTitle.UPDATE_ERROR)
        raise HttpProblemError(web.HTTPBadRequest, problem)

    entity.metadata.modified = utils.now()

    # Resource is in "deletion in progress" state and all finalizers have
    # been removed. Delete the resource from database.
    if entity.metadata.deleted and not entity.metadata.finalizers:
        await session(request).delete(entity)
        logger.info(
            "Delete %s %r (%s)", "{{ operation.resource.singular }}", entity.metadata.name, entity.metadata.uid
        )
    else:
        await session(request).put(entity)
        logger.info(
            "Update %s %r (%s)", "{{ operation.resource.singular }}", entity.metadata.name, entity.metadata.uid
        )

    return web.json_response(entity.serialize())
