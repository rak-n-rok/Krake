async def test_create_{{ operation.signature_name }}_tosca_from_dict(aiohttp_client, config, db):
    client = await aiohttp_client(create_app(config=config))

    # MISSING Resource-specific elements can be set here
    tosca = create_tosca_from_resources([deployment_manifest])
    data = {{ operation.body.__name__ }}Factory(
        status=None,
        spec__manifest=[],
        spec__tosca=tosca,
    )

    resp = await client.post("{{ operation.path.format(namespace="testing", name="{name}") }}", json=data.serialize())
    assert resp.status == 200
    received = {{ operation.response.__name__ }}.deserialize(await resp.json())

    assert received.metadata.created
    assert received.metadata.modified
    assert received.metadata.namespace {{ '== "testing"' | safe if operation.resource.namespaced else "is None" | safe }}
    assert received.metadata.uid
    assert received.status.state == ApplicationState.PENDING
    # MISSING The resource-specific attributes can be verified here.
    # assert received.spec == data.spec

    stored = await db.get({{ operation.response.__name__ }}, {{ namespace_testing(operation) }}name=data.metadata.name)
    assert stored == received


async def test_create_{{ operation.signature_name }}_tosca_from_url(aiohttp_client, config, db, file_server):
    client = await aiohttp_client(create_app(config=config))

    # MISSING Resource-specific elements can be set here
    tosca_url = file_server(create_tosca_from_resources([deployment_manifest]))
    data = {{ operation.body.__name__ }}Factory(
        status=None,
        spec__manifest=[],
        spec__tosca=tosca_url,
    )

    resp = await client.post("{{ operation.path.format(namespace="testing", name="{name}") }}", json=data.serialize())
    assert resp.status == 200
    received = {{ operation.response.__name__ }}.deserialize(await resp.json())

    assert received.metadata.created
    assert received.metadata.modified
    assert received.metadata.namespace {{ '== "testing"' | safe if operation.resource.namespaced else "is None" | safe }}
    assert received.metadata.uid
    assert received.status.state == ApplicationState.PENDING
    # MISSING The resource-specific attributes can be verified here.
    # assert received.spec == data.spec

    stored = await db.get({{ operation.response.__name__ }}, {{ namespace_testing(operation) }}name=data.metadata.name)
    assert stored == received


async def test_create_{{ operation.signature_name }}_csar_from_url(aiohttp_client, config, db, archive_files, file_server):
    client = await aiohttp_client(create_app(config=config))

    # MISSING Resource-specific elements can be set here
    tosca = create_tosca_from_resources([deployment_manifest])
    csar_path = archive_files(
        archive_name="archive.csar",
        files=[
            ("tosca.yaml", tosca),
            (
                "TOSCA-Metadata/TOSCA.meta",
                CSAR_META.format(entry_definition="tosca.yaml"),
            ),
        ],
    )
    csar_url = file_server(csar_path, file_name="example.csar")
    data = {{ operation.body.__name__ }}Factory(
        status=None,
        spec__manifest=[],
        spec__csar=csar_url,
    )

    resp = await client.post("{{ operation.path.format(namespace="testing", name="{name}") }}", json=data.serialize())
    assert resp.status == 200
    received = {{ operation.response.__name__ }}.deserialize(await resp.json())

    assert received.metadata.created
    assert received.metadata.modified
    assert received.metadata.namespace {{ '== "testing"' | safe if operation.resource.namespaced else "is None" | safe }}
    assert received.metadata.uid
    assert received.status.state == ApplicationState.PENDING
    # MISSING The resource-specific attributes can be verified here.
    # assert received.spec == data.spec

    stored = await db.get({{ operation.response.__name__ }}, {{ namespace_testing(operation) }}name=data.metadata.name)
    assert stored == received
