@pytest.mark.parametrize("multipart", [True, False])
async def test_create_{{ operation.signature_name }}_tosca(aiohttp_client, config, db, tosca, tosca_pod, multipart):
    client = await aiohttp_client(create_app(config=config))

    # MISSING Resource-specific elements can be set here
    data = {{ operation.body.__name__ }}Factory(
        status=None,
        spec__manifest=[],
        spec__tosca=tosca,
    )

    # POST/PUT requests could be sent as a multipart media type
    request_kwargs = {}
    if multipart:
        with aiohttp.MultipartWriter() as multipart_data:
            multipart_data.append_json(data.serialize())
        request_kwargs.update({"data": multipart_data})
    else:
        request_kwargs.update({"json": data.serialize()})

    resp = await client.post("{{ operation.path.format(namespace="testing", name="{name}") }}", **request_kwargs)
    assert resp.status == 200
    received = {{ operation.response.__name__ }}.deserialize(await resp.json())

    assert received.metadata.created
    assert received.metadata.modified
    assert received.metadata.namespace {{ '== "testing"' | safe if operation.resource.namespaced else "is None" | safe }}
    assert received.metadata.uid
    assert received.spec.manifest == [tosca_pod]
    assert received.status.state == ApplicationState.PENDING
    # MISSING The resource-specific attributes can be verified here.
    # assert received.spec == data.spec

    stored = await db.get({{ operation.response.__name__ }}, {{ namespace_testing(operation) }}name=data.metadata.name)
    assert stored == received


async def test_create_{{ operation.signature_name }}_csar(aiohttp_client, config, db, csar, tosca_pod):
    client = await aiohttp_client(create_app(config=config))

    # MISSING Resource-specific elements can be set here
    data = {{ operation.body.__name__ }}Factory(
        status=None,
        spec__manifest=[],
        spec__csar=csar,
    )

    with aiohttp.MultipartWriter() as multipart_data:
        multipart_data.append_json(data.serialize())
        multipart_data.append(open(csar, "rb"))

    resp = await client.post("{{ operation.path.format(namespace="testing", name="{name}") }}", data=multipart_data)
    assert resp.status == 200
    received = {{ operation.response.__name__ }}.deserialize(await resp.json())

    assert received.metadata.created
    assert received.metadata.modified
    assert received.metadata.namespace {{ '== "testing"' | safe if operation.resource.namespaced else "is None" | safe }}
    assert received.metadata.uid
    assert received.spec.manifest == [tosca_pod]
    assert received.status.state == ApplicationState.PENDING
    # MISSING The resource-specific attributes can be verified here.
    # assert received.spec == data.spec

    stored = await db.get({{ operation.response.__name__ }}, {{ namespace_testing(operation) }}name=data.metadata.name)
    assert stored == received
