async def test_update_{{ operation.signature_name }}(aiohttp_client, config, db):
    client = await aiohttp_client(create_app(config=config))

    # MISSING Resource-specific attributes can be set here
    data = {{ operation.body.__name__ }}Factory()
    await db.put(data)
    # MISSING The resource-specific attributes can be updated here
    # data.spec.foo = bar

    resp = await client.put(
        f"{{ operation.path.format(namespace="testing", name="{data.metadata.name}") }}", json=data.serialize()
    )
    assert resp.status == 200
    received = {{ operation.response.__name__ }}.deserialize(await resp.json())

    assert received.api == "{{ operation.resource.api }}"
    assert received.kind == "{{ operation.response.__name__ }}"
    assert data.metadata.modified < received.metadata.modified
    # MISSING Assertions on resource-specific received values.
    # assert received.spec.foo == bar

    stored = await db.get({{ operation.response.__name__ }}, {{ namespace_testing(operation) }}name=data.metadata.name)
    assert stored == received


async def test_update_{{ operation.signature_name }}_to_delete(aiohttp_client, config, db):
    client = await aiohttp_client(create_app(config=config))

    data = {{ operation.body.__name__ }}Factory(
        metadata__deleted=fake.date_time(tzinfo=pytz.utc),
        metadata__finalizers=["cascade_deletion"],
    )
    await db.put(data)

    # Delete the {{ operation.resource.singular }}
    data.metadata.finalizers = []
    resp = await client.put(
        f"{{ operation.path.format(namespace="testing", name="{data.metadata.name}") }}", json=data.serialize()
    )
    assert resp.status == 200
    received = {{ operation.response.__name__ }}.deserialize(await resp.json())
    assert resource_ref(received) == resource_ref(data)

    # The {{ operation.resource.singular }} should be deleted from the database
    stored = await db.get({{ operation.response.__name__ }}, {{ namespace_testing(operation) }}name=data.metadata.name)
    assert stored is None


async def test_update_{{ operation.signature_name }}_rbac(rbac_allow, config, aiohttp_client):
    config.authorization = "RBAC"
    client = await aiohttp_client(create_app(config=config))

    resp = await client.put("{{ operation.path.format(namespace="testing", name="my-resource") }}")
    assert resp.status == 403

    async with rbac_allow(
        "{{ operation.resource.api }}",
        "{{ operation.resource.plural|lower }}",
        "update"
    ):
        resp = await client.put("{{ operation.path.format(namespace="testing", name="my-resource") }}")
        assert resp.status == 415


async def test_update_{{ operation.signature_name }}_no_changes(aiohttp_client, config, db):
    client = await aiohttp_client(create_app(config=config))

    data = {{ operation.body.__name__ }}Factory()
    await db.put(data)

    resp = await client.put(
        f"{{ operation.path.format(namespace="testing", name="{data.metadata.name}") }}", json=data.serialize()
    )
    assert resp.status == 400


async def test_update_{{ operation.signature_name }}_immutable_field(aiohttp_client, config, db):
    client = await aiohttp_client(create_app(config=config))

    data = {{ operation.body.__name__ }}Factory()
    await db.put(data)
    data.metadata.namespace = "override"

    resp = await client.put(
        f"{{ operation.path.format(namespace="testing", name="{data.metadata.name}") }}", json=data.serialize()
    )
    assert resp.status == 400

    received = await resp.json()
    problem = HttpProblem.deserialize(received)
    assert problem.title == HttpProblemTitle.UPDATE_ERROR
    assert problem.detail == "Trying to update an immutable field: namespace"
