async def test_update_{{ operation.signature_name }}(aiohttp_client, config, db):
    client = await aiohttp_client(create_app(config=config))

    # MISSING Subresource-specific attributes can be set here
    data = {{ operation.resource.singular }}Factory()
    await db.put(data)

    # MISSING The subresource-specific attributes can be updated here
    # data.{{ operation.subresource.name|lower }}.foo = bar
    {% if operation.body.__name__ != operation.resource.singular %}
    {{ operation.subresource.name|lower }} = {{ operation.body.__name__ }}()
    {% endif %}

    resp = await client.put(
        f"{{ operation.path.format(namespace="testing", name="{data.metadata.name}") }}",
        json={{ "data" if operation.body.__name__ == operation.resource.singular else operation.subresource.name|lower }}.serialize(),
    )
    assert resp.status == 200
    received = {{ operation.response.__name__ }}.deserialize(await resp.json())
    assert received.api == "{{ operation.resource.api }}"
    assert received.kind == "{{ operation.response.__name__ }}"

    # MISSING Assertions on subresource-specific received values.
    # assert received.{{ operation.subresource.name|lower }}.foo == bar

    stored = await db.get({{ operation.response.__name__ }}, {{ namespace_testing(operation) }}name=data.metadata.name)
    assert stored == received
    # MISSING Assertions on subresource-specific updated values.
    # assert received.{{ operation.subresource.name|lower }} == data.{{ operation.subresource.name|lower }}
    # assert received.{{ operation.subresource.name|lower }}.foo == bar


async def test_update_{{ operation.signature_name }}_rbac(rbac_allow, config, aiohttp_client):
    config.authorization = "RBAC"
    client = await aiohttp_client(create_app(config=config))

    resp = await client.put("{{ operation.path.format(namespace="testing", name="my-resource") }}")
    assert resp.status == 403

    async with rbac_allow(
        "{{ operation.resource.api }}",
        "{{ operation.subresource.resource_name }}",
        "update"
    ):
        resp = await client.put("{{ operation.path.format(namespace="testing", name="my-resource") }}")
        assert resp.status == 415
