stages:
  - pre
  - lint
  - test
  - e2e
  - release

variables:
  ETCD_VER: v3.5.12
  PROMETHEUS_VER: 2.12.0
  CFSSL_VER: 1.4.1
  CONFLUENT_VER: "7.0"
  KUBECONFORM_VER: 0.6.4
  TOSCA_PARSER_VER: 2.10.0

  # Change pip's cache directory to be inside the project directory since we
  # can only cache local items.
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  TEMPLATE_DIR: "examples/templates"

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH


# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
cache:
  paths:
    - .cache/pip

# Pre-commit hooks are checked here, because not everybody activates them
# in a public, open source project. This stage is only run on branches, because
# all problems should already be fixed when a merge is started.

pre-commit:
  stage: pre
  only:
    - branches
    - merge_requests
  variables:
    PRE_COMMIT_AUTO_FIX: "1"
    PRE_COMMIT_DEDUPLICATE_MR_AND_BRANCH: "true"

  image: registry.gitlab.com/yesolutions/docker-pre-commit
  script: |
    status=0
    pre-commit run --all-files || status=$?
    if [[ $status -ne 0 ]]; then
        if [[ -n "$CI_COMMIT_BRANCH" ]]; then
            git remote set-url origin "https://gitlab-ci-token:${PRE_COMMIT_ACCESS_TOKEN:-$CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
            git fetch origin
            git checkout $CI_COMMIT_BRANCH
        fi
        if [[ -n "$CI_MERGE_REQUEST_IID" ]]; then
            git remote set-url origin "https://gitlab-ci-token:${PRE_COMMIT_ACCESS_TOKEN:-$CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_MERGE_REQUEST_SOURCE_PROJECT_PATH}.git"
            git fetch origin
        fi
        pre-commit run --all-files  # check the status passes now with autofix otherwise, it'll stop here
    else
        exit 0
    fi

    if [[ -z "$PRE_COMMIT_AUTO_FIX" ]]; then
        echo "No auto-fix enabled."
        exit 1 # Job will fail
    fi

    git config --global user.email "krake@cloudandheat.com"
    git config --global user.name "Krake"

    # Proceed with auto-fix
    if [[ -z "$PRE_COMMIT_ACCESS_TOKEN" ]]; then
        echo "Auto-fix is enabled, but no pre-commit access token found." >> /dev/stderr
        echo "To enable automatic fixes, please create a project access token with repository write scope and set the PRE_COMMIT_ACCESS_TOKEN variable" > /dev/stderr
        exit 1
    fi

    if [[ -n "$CI_COMMIT_BRANCH" ]]; then
        git add -u .
        git commit -m "Automatic fixes from pre-commit CI job" -m "job url: $CI_JOB_URL" -m "Signed-off-by: Krake <krake@cloudandheat.com>"
        git push
        exit 1
    elif [[ -n "$CI_MERGE_REQUEST_IID" ]]; then
        git add -u .
        git commit -m "Automatic fixes from pre-commit CI job" -m "job url: $CI_JOB_URL" -m "Signed-off-by: Krake <krake@cloudandheat.com>"
        git push origin HEAD:"$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
        exit 1
    else
       echo "Auto fix is not supported in this context" > /dev/stderr
       echo "Auto fix is only available in branch and merge request pipelines" > /dev/stderr
       exit 1
    fi

# Unit tests and flake8 are run on commits on branches which are not yet in a
# merge requests (including master), on merge requests, and on scheduled
# pipeline (night runs). Unfortunately, this configuration create duplicates
# pipelines on merge requests. Unit tests and Flake are run twice.

# It is not possible to work around this issue. See
# https://gitlab.com/gitlab-org/gitlab-foss/issues/56632. Until workflow rules
# are added to the gitlab CI (See MR
# https://gitlab.com/gitlab-org/gitlab/merge_requests/18130), we have to work
# with duplicated pipelines on merge requests.

.unittests-krake-template: &unittests-krake
  stage: test
  needs: []
  artifacts:
    paths:
      - krake/.coverage.*
  only:
    - tags
    - branches
    - merge_requests
    - schedules
  script:

    # Verify cfssl
    - cfssl version
    - cfssljson --version

    # Verify java for Keycloak
    - java --version

    # Verify zookeeper, kafka and ksql
    - which zookeeper-server-start
    - which kafka-server-start
    - which ksql-server-start

    # Run tox
    - tox run -- --cov krake/krake --no-cov-on-fail --cov-report= --runslow krake/tests


unittests-krake-3.8:
  <<: *unittests-krake
  image: "registry.gitlab.com/rak-n-rok/krake/test_image:3.8"
  variables:
    TOXENV: py38
    COVERAGE_FILE: krake/.coverage.py38


unittests-krake-3.9:
  <<: *unittests-krake
  image: "registry.gitlab.com/rak-n-rok/krake/test_image:3.9"
  variables:
    TOXENV: py39
    COVERAGE_FILE: krake/.coverage.py39


unittests-krake-3.10:
  <<: *unittests-krake
  image: "registry.gitlab.com/rak-n-rok/krake/test_image:3.10"
  variables:
    TOXENV: py310
    COVERAGE_FILE: krake/.coverage.py310


unittests-krake-3.11:
  <<: *unittests-krake
  image: "registry.gitlab.com/rak-n-rok/krake/test_image:3.11"
  variables:
    TOXENV: py311
    COVERAGE_FILE: krake/.coverage.py311

lint-kubeconform:
  stage: lint
  image:
    name: ghcr.io/yannh/kubeconform:v${KUBECONFORM_VER}-alpine
    entrypoint: [""]
  rules:
    - changes:
        compare_to: 'refs/heads/master'
        paths:
          - examples/**/k8s/*.{yaml,yml}
  script:
  - find examples -wholename "*/k8s/*.yaml" -o -wholename "*/k8s/*.yml" | xargs -i /kubeconform -summary -output json {}

lint-tosca-templates:
  stage: lint
  image: python:3.10
  rules:
    - changes:
        compare_to: 'refs/heads/master'
        paths:
          - examples/**/tosca/*.{yaml,yml}
  script:
    - pip install tosca-parser==${TOSCA_PARSER_VER}
    - find examples -wholename "*/tosca/*.yaml" -o -wholename "*/tosca/*.yml" | xargs -i tosca-parser --template-file {}

flake8-krake:
  stage: lint
  image: python:3.10
  only:
    - tags
    - branches
    - merge_requests
    - schedules
  script:
    - pip install -r gitlab-ci/requirements_lint.txt
    - flake8 krake/krake


flake8-rok:
  stage: lint
  image: python:3.10
  only:
    - tags
    - branches
    - merge_requests
    - schedules
  script:
    - pip install -r gitlab-ci/requirements_lint.txt
    - flake8 rok/rok


test-build-docs:
  stage: test
  needs: []
  image: python:3.10
  only:
    - tags
    - branches
    - merge_requests
    - schedules
  script:
    - cd ./docs
    - pip install -r requirements.txt
    - make html

# Combine code coverage reports from previous tox runs for all different
# Python environments. Report code coverage for Krake Python package and exit
# with non-zero if the code coverage ratio is under 85%.
coverage-krake:
  stage: e2e
  image: python:3.10
  script:
    - pip install -r gitlab-ci/requirements_coverage.txt
    - coverage combine krake/.coverage.*
    - coverage report --fail-under 85
    - coverage html
    - tar -czvf coverage.tar.gz htmlcov
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  only:
    - tags
    - branches
    - merge_requests
    - schedules
  artifacts:
    paths:
      - coverage.tar.gz

coverage-krake-visualization:
  stage: e2e
  image: python:3.10
  script:
    - pip install -r gitlab-ci/requirements_coverage.txt
    - coverage combine krake/.coverage.*
    - coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  only:
    - merge_requests
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# Following job are for end-to-end testing. We're provisioning the staging
# infrastructure in the e2e-provisioning job before and run the end-to-end
# tests, and cleanup the staging infrastructure. They are run only on the
# master branch, on merge requests, and on scheduled pipeline (night runs)
e2e-provisioning:
  stage: test
  needs: []
  image: registry.gitlab.com/rak-n-rok/krake/ansible_image:latest
  only:
    - master
    - merge_requests
    - schedules
  needs:
    - flake8-krake
    - flake8-rok
  artifacts:
    public: false #To not expose private ssh key
    paths:
      - ansible/.etc/hosts-CI.json
      - .ssh/id_rsa
  cache: []
  variables:
    ANSIBLE_CONFIG: ansible/ansible.cfg
    ANSIBLE_INVENTORY: ansible/hosts-CI
  retry: 2
  script:
    # Create SSH keys for to use during the whole pipeline
    - mkdir .ssh/
    - openstack keypair delete my_runner_key_$CI_PIPELINE_ID || true
    - openstack keypair create my_runner_key_$CI_PIPELINE_ID > .ssh/id_rsa
    - chmod 600 .ssh/id_rsa

    # Configure host-CI template with the CI Pipeline ID
    - sed -i "s/\$CI_PIPELINE_ID/$CI_PIPELINE_ID/g" ansible/hosts-CI

    # Ansible refuses to read from a world-writeable folder, see https://github.com/webdevops/Dockerfile/issues/266#issuecomment-417291633
    - chmod -v 700 ansible/

    ###################################
    ### Provision the staging infra ###
    ###################################
    # - ansible-playbook  ansible/site.yml
    - ansible-playbook  ansible/network.yml
    - ansible-playbook  ansible/gateway.yml
    - ansible-playbook  ansible/microk8s_cluster.yml
    - ansible-playbook  ansible/krake.yml
    - ansible-playbook  ansible/krake_handle_certs.yml

    ##################################################
    ### Smoke tests + Integration test preperation ###
    ##################################################
    - ansible-playbook  ansible/smoke_tests.yml
    - ansible-playbook  ansible/integration_tests.yml --tags prepare-tests --skip-tags always


e2e-test-apps:
  stage: e2e
  image: registry.gitlab.com/rak-n-rok/krake/ansible_image:latest
  artifacts:
    when: on_failure
    paths:
      - ansible/E2E_logs/krake_logs.tar.gz
  cache: []
  only:
    - master
    - merge_requests
    - schedules
  variables:
    ANSIBLE_CONFIG: ansible/ansible.cfg
    ANSIBLE_INVENTORY: ansible/hosts-CI
  script:
    # Configure host-CI template with the CI Pipeline ID
    - sed -i "s/\$CI_PIPELINE_ID/$CI_PIPELINE_ID/g" ansible/hosts-CI
    # Ansible refuses to read from a world-writeable folder, see https://github.com/webdevops/Dockerfile/issues/266#issuecomment-417291633
    - chmod -v 700 ansible/
    #########################
    ### Integration tests ###
    #########################
    - ansible-playbook ansible/integration_tests.yml --tags "krake_with_clusters" --limit krake-$CI_PIPELINE_ID-app


#e2e-test-im:
#  stage: e2e
#  image: registry.gitlab.com/rak-n-rok/krake/ansible_image:latest
#  artifacts:
#    when: on_failure
#    paths:
#      - ansible/E2E_logs/krake_logs.tar.gz
#  cache: []
#  only:
#    - master
#    - merge_requests
#    - schedules
#  variables:
#    ANSIBLE_CONFIG: ansible/ansible.cfg
#    ANSIBLE_INVENTORY: ansible/hosts-CI
#  script:
#    # Configure host-CI template with the CI Pipeline ID
#    - sed -i "s/\$CI_PIPELINE_ID/$CI_PIPELINE_ID/g" ansible/hosts-CI
#    # Ansible refuses to read from a world-writeable folder, see https://github.com/webdevops/Dockerfile/issues/266#issuecomment-417291633
#    - chmod -v 700 ansible/
#    #########################
#    ### Integration tests ###
#    #########################
#    - time ansible-playbook ansible/integration_tests.yml --tags "krake_im" --limit krake-$CI_PIPELINE_ID-im


e2e-cleanup:
  stage: release
  image: registry.gitlab.com/rak-n-rok/krake/ansible_image:latest
  only:
    - master
    - merge_requests
    - schedules
  variables:
    ANSIBLE_CONFIG: ansible/ansible.cfg
    ANSIBLE_INVENTORY: ansible/hosts-CI
  dependencies: [] # To prevent downloading artefacts from previous stages
  cache: []
  retry: 2
  script:
    - echo "Run script to clean up OpenStack infrastructure"
    # Delete the runner SSH keys
    - openstack keypair delete my_runner_key_$CI_PIPELINE_ID || true
    # Configure host-CI template with the CI Pipeline ID
    - sed -i "s/\$CI_PIPELINE_ID/$CI_PIPELINE_ID/g" ansible/hosts-CI
    #################################
    ### Cleanup the staging infra ###
    #################################
    - ansible-playbook ansible/unprovision.yml
  when: always


pypi:
  stage: release
  image:
    name: python:3.10
  before_script:
    - pip install --upgrade twine
    - pip install --upgrade build
  script:
    - cd ./krake
    - python3 -m build
    - python3 -m twine upload dist/*
  only:
    - tags
  except:
    - branches


docker:
  stage: release
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "./docker/krake/Dockerfile"
      --destination "registry.gitlab.com/rak-n-rok/krake:${CI_COMMIT_TAG}"
      --destination "registry.gitlab.com/rak-n-rok/krake:latest"
  only:
    - tags
  except:
    - branches
