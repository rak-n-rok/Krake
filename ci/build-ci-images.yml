stages:
  - pre
  - lint
  - test
  - e2e
  - release


variables:
  # keep the version according to the official gitlab CI/CD documentation
  # see: https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
  # newer version do not work at the moment
  KANIKO_IMAGE: gcr.io/kaniko-project/executor
  KANIKO_VERSION: v1.14.0-debug


build-ci-image-ansible:
  stage: pre
  image:
    name: "${KANIKO_IMAGE}:${KANIKO_VERSION}"
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "./ci/docker/ansible_runner/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/ansible_image:latest"
      --verbosity=info
      ## uncomment for debugging purpose:
      #--verbosity=debug
      #--no-push


build-ci-image-pre-commit:
  stage: pre
  image:
    name: "${KANIKO_IMAGE}:${KANIKO_VERSION}"
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "./ci/docker/pre_commit/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/pre_commit_image:latest"
      --verbosity=info


.build-ci-images: &build-image-unitest
  stage: pre
  image:
    name: "${KANIKO_IMAGE}:${KANIKO_VERSION}"
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --build-arg "PYTHON_VER=${PYTHON_BUILD_VERSION}"
      --dockerfile "./ci/docker/test_image/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/test_image:${PYTHON_BUILD_VERSION}"
      --verbosity=info
      --cleanup

build-ci-image-3.8:
  <<: *build-image-unitest
  variables:
    PYTHON_BUILD_VERSION: "3.8"

build-ci-image-3.9:
  <<: *build-image-unitest
  variables:
    PYTHON_BUILD_VERSION: "3.9"

build-ci-image-3.10:
  <<: *build-image-unitest
  variables:
    PYTHON_BUILD_VERSION: "3.10"

build-ci-image-3.11:
  <<: *build-image-unitest
  variables:
    PYTHON_BUILD_VERSION: "3.11"


test-pre-commit:
  stage: test
  variables:
    PRE_COMMIT_AUTO_FIX: "0"
    PRE_COMMIT_DEDUPLICATE_MR_AND_BRANCH: "true"

  image: registry.gitlab.com/rak-n-rok/krake/pre_commit_image:latest
  before_script:
    - apt list --installed |grep librtmp
  script: |
    status=0
    pre-commit run --all-files || status=$?
    if [[ $status -ne 0 ]]; then
        if [[ -n "$CI_COMMIT_BRANCH" ]]; then
            git remote set-url origin "https://gitlab-ci-token:${PRE_COMMIT_ACCESS_TOKEN:-$CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
            git fetch origin
            git checkout $CI_COMMIT_BRANCH
        fi
        if [[ -n "$CI_MERGE_REQUEST_IID" ]]; then
            git remote set-url origin "https://gitlab-ci-token:${PRE_COMMIT_ACCESS_TOKEN:-$CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_MERGE_REQUEST_SOURCE_PROJECT_PATH}.git"
            git fetch origin
        fi
        pre-commit run --all-files  # check the status passes now with autofix otherwise, it'll stop here
    else
        exit 0
    fi

    if [[ -z "$PRE_COMMIT_AUTO_FIX" ]]; then
        echo "No auto-fix enabled."
        exit 0 # Job should not fail
    fi


.unittests-krake-template: &unittests-krake
  stage: test
  artifacts:
    paths:
      - krake/.coverage.*
  only:
    - tags
    - branches
    - merge_requests
    - schedules
  script:

    # Verify cfssl
    - cfssl version
    - cfssljson --version

    # Verify java for Keycloak
    - java --version

    # Verify zookeeper, kafka and ksql
    - which zookeeper-server-start
    - which kafka-server-start
    - which ksql-server-start

    # Run tox
    - tox run -- --cov krake/krake --no-cov-on-fail --cov-report= krake/tests

test-unittests-krake-3.8:
  <<: *unittests-krake
  image: "registry.gitlab.com/rak-n-rok/krake/test_image:3.8"
  variables:
    TOXENV: py38
    COVERAGE_FILE: krake/.coverage.py38

test-unittests-krake-3.9:
  <<: *unittests-krake
  image: "registry.gitlab.com/rak-n-rok/krake/test_image:3.9"
  variables:
    TOXENV: py39
    COVERAGE_FILE: krake/.coverage.py39

test-unittests-krake-3.10:
  <<: *unittests-krake
  image: "registry.gitlab.com/rak-n-rok/krake/test_image:3.10"
  variables:
    TOXENV: py310
    COVERAGE_FILE: krake/.coverage.py310

test-unittests-krake-3.11:
  <<: *unittests-krake
  image: "registry.gitlab.com/rak-n-rok/krake/test_image:3.11"
  variables:
    TOXENV: py311
    COVERAGE_FILE: krake/.coverage.py311
