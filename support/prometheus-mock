#!/usr/bin/env python3
"""Simple mockup server for Prometheus HTTP query API.

Example:
    The following example will spawn a HTTP server with two metrics ``m1`` and
    ``m2``.

    .. code:: bash

        # Start the HTTP mockup server
        support/prometheus-mock --metric m1 0.5 0.7 0.9 --metric m2 1.0

        # Request value for metric "m1"
        curl -s "http://localhost:9100/api/v1/query?query=m1" | python3 -m json.tool
        {
            "status": "success",
            "data": {
                "resultType": "vector",
                "result": [
                    {
                        "metric": {
                            "__name__": "m1",
                            "instance": "unittest",
                            "job": "unittest"
                        },
                        "value": [
                            1573475534.8229003,
                            "0.5"
                        ]
                    }
                ]
            }
        }

Metrics are specified with the ``--metric`` argument. ``--metric`` options may
occur several times.

A metric comprises a name and one or more values. Values are interpreted as
strings. The HTTP server will iterate over the list of values and respond to
subsequent queries for metrics matching the name with the next element of the
list.

If the end of the list is reached, the HTTP server will respond with an empty
value for the metric. This behavior can be changed by the ``--cycle`` option.
If specified, the iteration starts from the beginning of the list.

"""
import logging
import asyncio
import itertools
from argparse import ArgumentParser, Action, ArgumentError
from aiohttp import web, ClientSession
from krake.test_utils import make_prometheus


def main(host, port, metrics, cycle, update):
    logging.basicConfig(level="INFO")

    if update:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(send_update(host, port, metrics, cycle))
    else:
        if cycle:
            metrics = {
                name: itertools.cycle(series) for name, series in metrics.items()
            }
        app = make_prometheus(metrics)
        web.run_app(app, host=host, port=port)


async def send_update(host, port, metrics, cycle):
    async with ClientSession() as session:
        resp = await session.post(
            f"http://{host}:{port}/-/update", json={"metrics": metrics, "cycle": cycle}
        )
        resp.raise_for_status()


class MetricAction(Action):
    def __init__(self, option_strings, dest, **kwargs):
        if "nargs" in kwargs:
            raise TypeError("nargs not allowed")
        if "default" in kwargs:
            raise TypeError("default not allowed")
        super().__init__(option_strings, dest, nargs="+", default={}, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        if len(values) < 2:
            raise ArgumentError(self, "Required form: <metric> <value> [<value> …]")

        name = values[0]
        series = values[1:]

        mapping = getattr(namespace, self.dest)
        mapping[name] = series


parser = ArgumentParser(description="Mockup server for Prometheus HTTP query API")
parser.add_argument("--host", help="Host to bind the HTTP server", default="localhost")
parser.add_argument(
    "--port", type=int, help="TCP port to bind the HTTP server", default=9100
)
parser.add_argument(
    "--metric",
    "-m",
    dest="metrics",
    action=MetricAction,
    help="Metric series of form: <name> <value> [<value> …]",
    required=True,
)
parser.add_argument("--cycle", "-c", action="store_true", help="Repeat metric values")
parser.add_argument("--update", action="store_true", help="Update running")


if __name__ == "__main__":
    args = parser.parse_args()
    main(**vars(args))
