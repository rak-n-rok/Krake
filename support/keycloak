#!/usr/bin/env python3
"""
Prepare and start a Keycloak instance for development purposes.

How to use this script:

 0. download Keycloak, put it anywhere. Let's call its path 'K_PATH';
 1. initialize the server, using the command:

    .. code:: bash

        support/keycloak init --keycloak-dir $K_PATH/keycloak-X.X.X

        # Or set a specific port with (default is 9080):
        support/keycloak -p <port> init --keycloak-dir $K_PATH/keycloak-X.X.X

 2. start the server using simply the script without arguments. Or specify:

     * a different temporary directory with ``--temp-dir <temp_dir>``);
     * a different port with ``-p <port>``

    .. code:: bash

        support/keycloak

        # Or with arguments:
        support/keycloak -p <port> --temp-dir <directory>

 3. use the following command to get and store a token for the user 'krake':

    .. code:: bash

        TOKEN=$(support/keycloak token)

 4. use the Keycloak server for authentication, for instance using:

    .. code:: bash

        # Change the port according to your setup
        curl -d "access_token=$TOKEN" \
            http://localhost:9080/auth/realms/krake/protocol/openid-connect/userinfo

 5. (optional) the credentials can also be retrieved with:

    .. code:: bash

        support/keycloak credentials

If a different temporary directory or port has been given at step 2, it must be given
again for the steps 3 and 5, otherwise the commands will fail. Example:

.. code:: bash

    # Step 3
    TOKEN=$(support/keycloak -p <port> --temp-dir <directory> token)

    # Step 5
    support/keycloak -p <port> --temp-dir <directory> credentials

"""
import json
import os.path
import shutil
import signal
import subprocess
import sys
from contextlib import suppress

import requests
import yaml

from argparse import ArgumentParser
from pathlib import Path

root_dir = Path(__file__).parent.parent.resolve()
default_temp_dir = root_dir / "tmp/keycloak"

# Default port for a normal Keycloak installation. Conflict with Krake's default port.
base_keycloak_default_port = 8080
# Default port for the Keycloak installation managed by this support script
support_keycloak_default_port = 9080

base_url = "http://localhost:{port}"
# URL to get a token for a user. The realm needs to be set.
no_realm_token_url = base_url + "/auth/realms/{realm}/protocol/openid-connect/token"

admin_username = "admin"
admin_password = "admin"

krake_realm = "krake"
krake_username = "krake"
krake_password = "krake"
krake_client_name = "krake_client"
krake_client_secret = "AVeryCoolAndSecureSecret"


def get_keycloak_config_path(temp_dir):
    """Get the path to the configuration directory that should be used for the Keycloak
    installation.

    Args:
        temp_dir (Path): path to the directory where the Keycloak temporary files are
            stored.

    Returns:
        Path: the path to the configuration directory in the temporary directory.

    """
    return temp_dir / "configuration"


def get_keycloak_support_configuration(temp_dir):
    """Get the path to the configuration file that will be used to store the information
    on how to start the keycloak server.

    Args:
        temp_dir (Path): path to the directory where the Keycloak temporary files are
            stored.

    Returns:
        Path: the path to the configuration file.

    """
    return temp_dir / "keycloak_configuration.yaml"


def get_keycloak_path_and_port(keycloak_dir, chosen_port, temp_dir):
    """Get the path of the Keycloak installation and the port that should be used by
    the server. For both variables:

     * if a support keycloak configuration file exists and one (or both) variable is
        not given as parameter, use the value from the file;
     * if a support keycloak configuration file exists and one (or both) variable is
        given as parameter, use the parameters (parameters have higher priority);
     * if the support keycloak configuration file does not exist, and a path and port
        are given as parameters, store the given values and use it;
     * if the support keycloak configuration file does not exist, and either the path or
         port is not given as parameter, raise an exception.

    Args:
        keycloak_dir (str): the path to the root of the installation directory of
            keycloak, or None, if not provided.
        chosen_port (int): the port on which keycloak should listen.
        temp_dir (Path): path to the directory where the Keycloak temporary files should
            be stored.

    Returns:
        (Path, int): the path to the root of the installation directory of keycloak and
            the port on which keycloak should listen.

    Raises:
        SystemExit: if no path is given as parameter, no path can be read from the
            configuration file, or no port is given or can be read from the file.

    """
    support_configuration_file = get_keycloak_support_configuration(temp_dir)

    if os.path.exists(support_configuration_file):
        with open(support_configuration_file, "r") as file:
            data = yaml.safe_load(file)

        if chosen_port is None:
            chosen_port = data["chosen_port"]
        if keycloak_dir is None:
            keycloak_dir = data["path_to_keycloak_dir"]
    else:
        if keycloak_dir is not None and chosen_port is not None:
            with open(support_configuration_file, "w") as file:
                yaml.dump(
                    {"chosen_port": chosen_port, "path_to_keycloak_dir": keycloak_dir},
                    file,
                )
        else:
            sys.exit(
                "Either keycloak-dir or the port (or both) has not been set,"
                f" or could not be read from '{support_configuration_file}'."
                "Please call 'support/keycloak init <...>'."
            )

    return Path(keycloak_dir), chosen_port


def copy_base_files(keycloak_path, temp_dir):
    """Copy the configuration directory from keycloak into the temporary storage
    directory. If an error is raised because the copied directory already exists at the
    destination, abort the copy and ignore the error.

    Args:
        keycloak_path (Path): path to the root of the keycloak installation.
        temp_dir (Path): path to the directory where the Keycloak temporary files are
            stored.

    Raises:
        FileNotFoundError: if the configuration directory of keycloak cannot be found.

    """
    config_src = keycloak_path / "standalone/configuration"

    if not os.path.exists(config_src):
        raise FileNotFoundError(f"The configuration file '{config_src}' does not exist")

    keycloak_config = get_keycloak_config_path(temp_dir)
    with suppress(FileExistsError):
        shutil.copytree(config_src, keycloak_config)


def create_admin_user(keycloak_path, temp_dir):
    """Create an administrator user in the temporary storage directory.

    Args:
        keycloak_path (Path): path to the root of the keycloak installation.
        temp_dir (Path): path to the directory where the Keycloak temporary files are
            stored.

    Raises:
        SystemExit: if the command to create an administrator failed.

    """
    keycloak_config = get_keycloak_config_path(temp_dir)

    script_path = keycloak_path / "bin/add-user-keycloak.sh"
    command = (
        f"{script_path} --roles admin -r master"
        f" -u {admin_username} -p {admin_password}"
        f" --sc {keycloak_config} --dc {keycloak_config}"
    )
    try:
        subprocess.run(command.split(" "), check=True)
    except subprocess.CalledProcessError:
        add_user_file = get_keycloak_config_path(temp_dir) / "keycloak-add-user.json"
        message = (
            "Error: The administrator user could not be added. If the file at"
            f" '{add_user_file}' exists, it probably means that the initialization was"
            " attempted earlier but failed. Thus, delete the file if it exists and try"
            " the initialization again."
        )
        sys.exit(message)


def start_instance(keycloak_path, temp_dir, chosen_port, with_pipe=False):
    """Start the keycloak server stored at the provided path.

    The server is started with two options:
     * the base directory is set to the temporary directory;
     * all ports used by the server are given an offset of 1000. So if the port 8080 is
       used by default, 9080 is used here (to prevent conflicts with the Krake API).

    Args:
        keycloak_path (Path): path to the root of the keycloak installation.
        temp_dir (Path): path to the directory where the Keycloak temporary files are
            stored.
        chosen_port (int): the port on which keycloak should listen.
        with_pipe (bool): if True, the server will be started with the shell, and some
            other parameters to allow the server to be stopped gracefully.

    Returns:
        subprocess.Popen: a reference to the server running as process in the
            background.

    """
    script_path = keycloak_path / "bin/standalone.sh"
    port_offset = chosen_port - base_keycloak_default_port
    command = (
        f"{script_path} -Djboss.server.base.dir={temp_dir}"
        f" -Djboss.socket.binding.port-offset={port_offset}"
    )

    kwargs = {}
    if with_pipe:
        # Without this, the server is kept in the background even if the script is
        # stopped.
        kwargs = {
            "stdin": subprocess.PIPE,
            "stdout": subprocess.PIPE,
            "stderr": subprocess.STDOUT,
            "shell": True,
            "preexec_fn": os.setsid,
        }
    else:
        # According to the subprocess documentation, the command should not be split
        # when shell is set to True.
        command = command.split(" ")

    return subprocess.Popen(command, **kwargs)


def create_realm(port):
    """Create a Keycloak realm using HTTP requests. Populate it with a user and a
    client. This allows the user's password and the client's secret to be set in
    advance.

    Args:
        port (int): the port on which keycloak should listen.

    """
    # Get admin token
    token_request = {
        "client_id": "admin-cli",
        "grant_type": "password",
        "username": admin_username,
        "password": admin_password,
    }
    master_token_url = no_realm_token_url.format(port=port, realm="master")
    response = requests.post(master_token_url, data=token_request)
    response.raise_for_status()

    token = response.json()["access_token"]

    # Create realm
    realm_name = "krake"
    # All parameters below for the Realm creation are necessary. More optional
    # parameters exist, but are not useful here.
    krake_user = {
        "credentials": [
            {"temporary": False, "type": "password", "value": krake_password}
        ],
        "email": "krake@raknrok.com",
        "enabled": True,
        "firstName": "Krake",
        "lastName": "RaknRok",
        "username": krake_username,
    }
    krake_client = {
        "clientId": krake_client_name,
        "directAccessGrantsEnabled": True,
        "protocol": "openid-connect",
        "secret": krake_client_secret,
    }
    realm_request = {
        "displayName": "Krake",
        "enabled": True,
        "realm": realm_name,
        "users": [krake_user],
        "clients": [krake_client],
    }

    realm_url = base_url.format(port=port) + "/auth/admin/realms"
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.post(realm_url, json=realm_request, headers=headers)
    # If the realm already exists, ignore.
    if response.status_code != 409:
        response.raise_for_status()


def init(arguments):
    """Initialize the server by:
     * copying the necessary files into a temporary directory;
     * creating an admin user;
     * starting the server;
     * creating the realm, a "krake" user and a Keycloak client for Krake;
     * stopping the server.

    Args:
        arguments (argparse.Namespace): arguments read from the CLI.

    """
    keycloak_dir = arguments.keycloak_dir
    temp_dir = arguments.temp_dir
    if isinstance(temp_dir, str):
        temp_dir = Path(temp_dir)

    temp_dir.mkdir(parents=True, exist_ok=True)

    port = arguments.port
    if not port:
        # set a default port at the initialization only.
        port = support_keycloak_default_port

    keycloak_path, chosen_port = get_keycloak_path_and_port(
        keycloak_dir, port, temp_dir
    )

    copy_base_files(keycloak_path, temp_dir)
    create_admin_user(keycloak_path, temp_dir)

    def finish(process):
        process.stdout.close()
        process.stdin.close()
        process.terminate()
        # See https://stackoverflow.com/questions/4789837/how-to-terminate-a-python-subprocess-launched-with-shell-true  # noqa
        os.killpg(os.getpgid(process.pid), signal.SIGTERM)

    server_output = start_instance(keycloak_path, temp_dir, chosen_port, with_pipe=True)
    try:
        # Create the realm while the server is running.
        for line in server_output.stdout:
            # Display the output of the server which would be swallowed otherwise.
            sys.stdout.buffer.write(line)

            # Check for the latest line displayed in the server's log.
            if "Admin console listening on" in line.decode("utf-8"):
                create_realm(chosen_port)
                finish(server_output)
                break
    except requests.exceptions.HTTPError:
        finish(server_output)
        raise
    finally:
        server_output.wait(timeout=5)


def main(arguments):
    """Only start the server from the path read from the path file written in the
    initialization step, or from the given directory, if one is provided.

    Args:
        arguments (argparse.Namespace): arguments read from the CLI.

    """
    temp_dir = arguments.temp_dir
    if isinstance(temp_dir, str):
        temp_dir = Path(temp_dir)

    port = arguments.port
    keycloak_path, chosen_port = get_keycloak_path_and_port(None, port, temp_dir)
    server_output = start_instance(keycloak_path, temp_dir, chosen_port)
    server_output.wait()


def get_token(arguments):
    """Print a keycloak token for the "krake" user.

    Args:
        arguments (argparse.Namespace): arguments read from the CLI.

    """
    temp_dir = arguments.temp_dir
    if isinstance(temp_dir, str):
        temp_dir = Path(temp_dir)
    port = arguments.port
    _, chosen_port = get_keycloak_path_and_port(None, port, temp_dir)

    token_request = {
        "grant_type": "password",
        "username": krake_username,
        "password": krake_password,
        "client_id": krake_client_name,
        "client_secret": krake_client_secret,
    }
    krake_token_url = no_realm_token_url.format(port=chosen_port, realm="krake")
    response = requests.post(krake_token_url, data=token_request)
    response.raise_for_status()

    token = response.json()["access_token"]
    print(token)


def get_credentials(arguments):
    """Print all necessary information to authenticate as the "krake" user.

    Args:
        arguments (argparse.Namespace): arguments read from the CLI.

    """
    temp_dir = arguments.temp_dir
    if isinstance(temp_dir, str):
        temp_dir = Path(temp_dir)
    port = arguments.port
    _, chosen_port = get_keycloak_path_and_port(None, port, temp_dir)

    credentials = {
        "port": chosen_port,
        "realm": krake_realm,
        "client_id": krake_client_name,
        "client_secret": krake_client_secret,
        "grant_type": "password",
        "username": krake_username,
        "password": krake_password,
    }
    print(json.dumps(credentials))


if __name__ == "__main__":
    parser = ArgumentParser(description="Keycloak server for development")
    parser.set_defaults(func=main)
    parser.add_argument(
        "--temp-dir",
        type=str,
        default=default_temp_dir,
        help=(
            "Path to the directory where the temporary files used to recreate the"
            " instance should be stored."
        ),
    )
    parser.add_argument(
        "-p", "--port", type=int, help="Port on which keycloak will listen."
    )

    subparsers = parser.add_subparsers()
    parser_init = subparsers.add_parser(
        "init",
        help=(
            "Initialize the server, the temporary directory, the realm for Krake and"
            " the krake user. Stops when the initialization is done."
        ),
    )
    parser_init.set_defaults(func=init)
    parser_init.add_argument(
        "--keycloak-dir",
        type=str,
        help="Root directory of Keycloak. Only required the first call.",
    )

    parser_token = subparsers.add_parser(
        "token", help="Print a token for the 'krake' user."
    )
    parser_token.set_defaults(func=get_token)

    parser_credentials = subparsers.add_parser(
        "credentials",
        help="Print all necessary credentials to authenticate as 'krake'.",
    )
    parser_credentials.set_defaults(func=get_credentials)

    args = parser.parse_args()
    args.func(args)
