#!/usr/bin/env python3
"""Simple helper script for starting a prometheus server and simple heat demand
exporter for development purpose. Heat demand exporter generates random heat
demand metrics for multiple zones. Default number of zones is 5: `heat_demand_zone_1` ..
`heat_demand_zone_5`. Random heat demand metric value is generated from
interval <`zone_number` - 1, `zone_number`). The regeneration interval of heat demand
metrics is given by prometheus scrape interval.

.. code:: bash
    $ support/prometheus
    $ curl -s localhost:9090/api/v1/query?query=heat_demand_zone_1 | jq
    {
      "status": "success",
      "data": {
        "resultType": "vector",
        "result": [
          {
            "metric": {
              "__name__": "heat_demand_zone_1",
              "instance": "localhost:9091",
              "job": "heat-demand-exporter"
            },
            "value": [
              1567703101.949,
              "0.47"
            ]
          }
        ]
      }
    }
"""

import subprocess
import random
import threading
import time
from argparse import ArgumentParser, FileType
from pathlib import Path

from prometheus_client import Gauge, start_http_server


root_dir = Path(__file__).parent.parent.resolve()

temp_dir = root_dir / "tmp/prometheus"

prometheus_config = """
global:
    scrape_interval: {interval}s
scrape_configs:
    - job_name: prometheus
      static_configs:
        - targets:
          - localhost:{prometheus_port}
    - job_name: heat-demand-exporter
      static_configs:
        - targets:
          - localhost:{exporter_port}
"""


def heat_demand_metric(zone, interval):
    metric = Gauge(f"heat_demand_zone_{zone}", "float - heat demand (kW)")
    while True:
        metric.set(round(random.uniform(zone - 1, zone), 2))
        time.sleep(interval)


def start_exporter(port, interval, zones):
    """Start prometheus simple heat demand exporter

    Args:
        port (int): Port where simple http exporter daemon is running
        interval (int): Regeneration interval of heat demand metrics values
        zones (int): Head demand metrics zone count

    """
    start_http_server(port)
    for zone in range(1, zones + 1):

        threading.Thread(
            target=heat_demand_metric,
            args=(zone, interval),
            name=f"heat demand zone-{zone} metric",
        ).start()


parser = ArgumentParser(
    description="Prometheus server for development listening on http://localhost:9090"
)
parser.add_argument(
    "--config",
    type=FileType(),
    help="Prometheus server configuration file path for overwriting the default",
)
parser.add_argument(
    "--port",
    type=int,
    default=9090,
    help="Prometheus server port to listen on. Default: 9090",
)
parser.add_argument(
    "--interval",
    type=int,
    default=10,
    help="Prometheus scrape interval[s]. Default: 10",
)
parser.add_argument(
    "--zones", type=int, default=5, help="Head demand metrics zone count Default: 5"
)


def main(config, port, interval, zones):

    temp_dir.mkdir(exist_ok=True)
    config_file = config or temp_dir / "prometheus.yml"

    exporter_port = port + 1

    if not config:
        with config_file.open("w") as fd:
            fd.write(
                prometheus_config.format(
                    interval=interval, prometheus_port=port, exporter_port=exporter_port
                )
            )

    start_exporter(exporter_port, interval, zones)
    subprocess.call(
        [
            "prometheus",
            "--config.file",
            str(config_file),
            "--web.enable-admin-api",
            "--web.listen-address",
            ":" + str(port),
        ]
    )


if __name__ == "__main__":
    args = vars(parser.parse_args())
    main(**args)
