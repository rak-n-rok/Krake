# tox (https://tox.wiki/) is a tool for running various tools in multiple
# virtualenvs. This configuration file can be used to:
#
#   1) run the test suite (this is the default action)
#   2) compile the pinned requirements with pip-tools
#
# on all supported python versions.
# To use it, `pip install tox` and then run `tox run` from this directory.

[tox]
min_version = 4.12

# Environments which are run by default.
# This list must be kept in sync with the testenv sections below and with
# the python versions in the Gitlab CI pipeline.
env_list =
    py38
    py39
    py310
    py311

# There is no top-level package.
skipsdist = True


[testenv]
# If needed, we install our packages explicitly in `commands_pre`, this
# is the same for all environments.
skip_install = True


[testenv:py{38,39,310,311}]
setenv =
    # Use environmental variable to define the data file for code coverage and
    # fallback to default ".coverage" file.
    COVERAGE_FILE = {env:COVERAGE_FILE:.coverage}

# Instead of tox's `deps` key, we use explicit pip install invocations with the
# --no-deps switch to ensure no unpinned requirements slip into the environment.
# The pip check tests if the dependencies are satisfied, i.e., if our
# requirements file is complete and consistent.
commands_pre =
    pip install --no-deps -r requirements/requirements-{envname}-test.txt
    pip install --no-deps './krake[test]' './rok[test]'
    pip check

commands =
    # Default tox command runs pytest for krake and rok. Coverage reports are
    # collected and appended across all environments.
    pytest {posargs:--cov=krake/krake --cov=rok/rok --cov-append krake/tests rok/tests}


# Custom section and config that avoids repetition in the `pip-tools`
# invocations below.
[pip-compile]
options = --quiet --no-strip-extras --constraint constraints.txt
files = krake/pyproject.toml rok/pyproject.toml


# Pin the requirements for each supported python version. This is not run by
# default but can be executed by running `tox run -m requirements`.
# Running pip-compile for each python version and having dedicated requirements
# files is necessary because the concrete dependencies can differ between
# python versions (e.g., because of environment markers).
# This tox solution is inspired by Viktor Rimark's blog post, see:
# https://blog.rxbc.se/posts/compile-and-use-dependencies-for-multiple-python-versions-in-tox/
[testenv:requirements-py{38,39,310,311}]
setenv =
    # This will be included as a hint in the header of the generated files.
    CUSTOM_COMPILE_COMMAND = tox run -m requirements

# Allows us to run all requirements-pyXY testenvs with `-m requirements`.
labels = requirements

# Our target platform is linux only.
platform = linux

deps =
    pip-tools

# Create pinned requirements files with and without the "test" extra.
commands =
    pip-compile {posargs} {[pip-compile]options} --output-file requirements/{envname}.txt {[pip-compile]files}
    pip-compile {posargs} {[pip-compile]options} --output-file requirements/{envname}-test.txt --extra test {[pip-compile]files}


# A test environment similar to the previous one, but for generating the
# requirements files of the tools we use in CI.
# Note: the python version must be kept in sync with the CI job configuration.
[testenv:tool-requirements-py310]
setenv =
    CUSTOM_COMPILE_COMMAND = tox run -m tool-requirements

labels = tool-requirements

platform = linux

deps =
    pip-tools

commands =
    pip-compile {posargs} --quiet --no-strip-extras docs/requirements.in
    pip-compile {posargs} --quiet --no-strip-extras ci/requirements_coverage.in
    pip-compile {posargs} --quiet --no-strip-extras ci/requirements_lint.in
