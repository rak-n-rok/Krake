upstream docker-krake-api {
    server krake_api_ctrl:5000;
}

# Prometheus http server to expose Krake site metrics is running on port 8000.
# Separate Prometheus http server to expose Krake uWsgi metrics is running on port 8001 and higher, based on the number of uWsgi workers.
{% for i in range(uwsgi_processes + 1) %}
upstream docker-krake-monitoring_{{ 8000 + i }} {
    server krake_api_ctrl:{{ 8000 + i }};
}
{% endfor %}

server {
    listen 80;

    # Server logging
    access_log /dev/stdout;
    error_log  /dev/stdout;

    # Redirect all traffic to SSL
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl default_server;
    underscores_in_headers on;

    # TODO For development purposes only. For production purposes need to be re-visited.
    # Server protocols and ciphers.
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    # Server certificate and key.
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_session_timeout  5m;

    # Server logging
    access_log /dev/stdout;
    error_log  /dev/stdout;

    # Custom error message
    proxy_intercept_errors on;
    error_page 500 502 503 504 /50x.html;

    location = /50x.html {
        root /etc/nginx/html;
    }

    location /applications {
        include uwsgi_params;
        uwsgi_pass uwsgi://docker-krake-api;
    }

    location /exporters/node/ {

        rewrite /exporters/node/(.*) /$1 break;

        proxy_pass http://$host:9100;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_connect_timeout 300;
    }

    location /exporters/containers/ {

        rewrite /exporters/containers/(.*) /$1 break;

        proxy_pass http://cadvisor:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_connect_timeout 300;
    }

    location /exporters/mysql/ {

        rewrite /exporters/mysql/(.*) /$1 break;

        proxy_pass http://mysqld-exporter:9104;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_connect_timeout 300;
    }

    location /exporters/nginx/ {

        content_by_lua '
          metric_connections:set(ngx.var.connections_reading, {"reading"})
          metric_connections:set(ngx.var.connections_waiting, {"waiting"})
          metric_connections:set(ngx.var.connections_writing, {"writing"})
          prometheus:collect()
        ';
    }

{% for i in range(uwsgi_processes + 1) %}

   location /exporters/krake/{{ 8000 + i }}/ {

        rewrite /exporters/krake/{{ 8000 + i }}/(.*) /$1 break;

        proxy_pass http://docker-krake-monitoring_{{ 8000 + i }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_connect_timeout 300;
   }
{% endfor %}

    location /exporters/rabbit/ {

        rewrite /exporters/rabbit/(.*) /api/$1 break;

        proxy_pass http://krake_rabbit:15672;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_connect_timeout 300;
    }
}

lua_shared_dict prometheus_metrics 10M;
lua_package_path "/usr/local/share/lua/5.1/nginx/prometheus.lua";
init_by_lua '
  prometheus = require("prometheus").init("prometheus_metrics")
  metric_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
  metric_latency = prometheus:histogram(
    "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
  metric_connections = prometheus:gauge(
    "nginx_http_connections", "Number of HTTP connections", {"state"})
';
log_by_lua '
  metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
  metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
';
