# Compose jinja2 template defines and runs docker containers for provisioning of the Krake Api,
# Krake Controllers and Krake DB infrastructure.
# Pre-built krake image is a prerequisite for this compose template.
# This compose jinja2 template can be configured by corresponding Ansible playbook
# or by `docker/generate` script in case of standalone installation.
#
# .. code:: bash
#
#     $ cd docker
#     $ docker/generate --config docker.yaml docker/krake
#     $ docker-compose --file krake/docker-compose.yaml up --detach

version: "3.8"

services:

  krake-etcd:
    container_name: {{ etcd.host }}
    image: quay.io/coreos/etcd:{{ etcd.version }}
    restart: always
    tty: true
    ports:
      - {{ etcd.port }}:{{ etcd.port }}
    volumes:
      - ./certs/:/srv/
      - /srv/docker/etcd:/etcd-data
    environment:
      ETCD_NAME: {{ etcd.host }}
      ETCD_DATA_DIR: /etcd-data/{{ etcd.host }}
      ETCDCTL_API: 3
      ETCD_ADVERTISE_CLIENT_URLS: http://{{ etcd.host }}:{{ etcd.port }}
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://{{ etcd.host }}:{{ etcd.peer_port }}
      ETCD_INITIAL_CLUSTER: {{ etcd.host }}=http://{{ etcd.host }}:{{ etcd.peer_port }}
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:{{ etcd.port }}
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:{{ etcd.peer_port }}

  krake-api:
    container_name: {{ api.host }}
    image: krake:latest
    restart: always
    tty: true
    ports:
      - {{ api.port }}:{{ api.port }}
    depends_on:
      - krake-etcd
    command: python3 -m krake.api
    secrets:
      - source: api-config
        target: "{{ krake.config.path }}/api.yaml"
      - source: ca-cert
        target: "{{ krake.cert_dir }}/ca.pem"
      - source: api-server-cert
        target: "{{ krake.cert_dir }}/system:api-server.pem"
      - source: api-server-key
        target: "{{ krake.cert_dir }}/system:api-server-key.pem"

  krake-ctrl-garbage-collector:
    image: krake:latest
    restart: always
    tty: true
    depends_on:
      - krake-api
    command: python3 -m krake.controller.gc
    secrets:
      - source: gc-config
        target: "{{ krake.config.path }}/garbage_collector.yaml"
      - source: ca-cert
        target: "{{ krake.cert_dir }}/ca.pem"
      - source: gc-cert
        target: "{{ krake.cert_dir }}/system:gc.pem"
      - source: gc-key
        target: "{{ krake.cert_dir }}/system:gc-key.pem"

  krake-ctrl-kubernetes-application:
    image: krake:latest
    restart: always
    tty: true
    depends_on:
      - krake-api
    command: python3 -m krake.controller.kubernetes
    secrets:
      - source: kubernetes-config
        target: "{{ krake.config.path }}/kubernetes.yaml"
      - source: ca-cert
        target: "{{ krake.cert_dir }}/ca.pem"
      - source: kubernetes-cert
        target: "{{ krake.cert_dir }}/system:kubernetes.pem"
      - source: kubernetes-key
        target: "{{ krake.cert_dir }}/system:kubernetes-key.pem"
      - source: complete-signing-cert
        target: "{{ krake.cert_dir }}/system:complete-signing.pem"
      - source: complete-signing-key
        target: "{{ krake.cert_dir }}/system:complete-signing-key.pem"

  krake-ctrl-scheduler:
    image: krake:latest
    restart: always
    tty: true
    depends_on:
      - krake-api
    command: python3 -m krake.controller.scheduler
    secrets:
      - source: scheduler-config
        target: "{{ krake.config.path }}/scheduler.yaml"
      - source: ca-cert
        target: "{{ krake.cert_dir }}/ca.pem"
      - source: scheduler-cert
        target: "{{ krake.cert_dir }}/system:scheduler.pem"
      - source: scheduler-key
        target: "{{ krake.cert_dir }}/system:scheduler-key.pem"

  krake-ctrl-magnum:
    image: krake:latest
    restart: always
    tty: true
    depends_on:
      - krake-api
    command: python3 -m krake.controller.magnum
    secrets:
      - source: magnum-config
        target: "{{ krake.config.path }}/magnum.yaml"
      - source: ca-cert
        target: "{{ krake.cert_dir }}/ca.pem"
      - source: magnum-cert
        target: "{{ krake.cert_dir }}/system:magnum.pem"
      - source: magnum-key
        target: "{{ krake.cert_dir }}/system:magnum-key.pem"

# Configs are not supported by docker-compose without Swarm, but the certificates and
# keys should not be shared between containers.
# As as workaround, secrets are used for all files specific to each container.
secrets:
  ca-cert:
    file: "{{ krake.cert_dir }}/ca.pem"

  api-config:
    file: "{{ krake.config.path }}/api.yaml"
  api-server-cert:
    file: "{{ krake.cert_dir }}/system:api-server.pem"
  api-server-key:
    file: "{{ krake.cert_dir }}/system:api-server-key.pem"

  gc-config:
    file: "{{ krake.config.path }}/garbage_collector.yaml"
  gc-cert:
    file: "{{ krake.cert_dir }}/system:gc.pem"
  gc-key:
    file: "{{ krake.cert_dir }}/system:gc-key.pem"

  kubernetes-config:
    file: "{{ krake.config.path }}/kubernetes.yaml"
  kubernetes-cert:
    file: "{{ krake.cert_dir }}/system:kubernetes.pem"
  kubernetes-key:
    file: "{{ krake.cert_dir }}/system:kubernetes-key.pem"
  complete-signing-cert:
    file: "{{ krake.cert_dir }}/system:complete-signing.pem"
  complete-signing-key:
    file: "{{ krake.cert_dir }}/system:complete-signing-key.pem"

  scheduler-config:
    file: "{{ krake.config.path }}/scheduler.yaml"
  scheduler-cert:
    file: "{{ krake.cert_dir }}/system:scheduler.pem"
  scheduler-key:
    file: "{{ krake.cert_dir }}/system:scheduler-key.pem"

  magnum-config:
    file: "{{ krake.config.path }}/magnum.yaml"
  magnum-cert:
    file: "{{ krake.cert_dir }}/system:magnum.pem"
  magnum-key:
    file: "{{ krake.cert_dir }}/system:magnum-key.pem"

{% if docker_daemon_mtu is defined %}
networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: {{ docker_daemon_mtu }}
{% endif %}
