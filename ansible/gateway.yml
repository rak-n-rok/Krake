- name: Launch network gateway instances
  hosts: gateways
  gather_facts: false
  tasks:

    - name: Create Heat stack for gateway
      delegate_to: localhost
      os_stack:
        name: "{{ inventory_hostname }}"
        state: present
        template:  "{{ playbook_dir }}/files/gateway/stack.yml"
        parameters:
          instance_name: "{{ inventory_hostname }}"
          key: "{{ keypair }}"
          flavor: "{{ flavor }}"
          gateway_secgroup: "{{ inventory_hostname }}-secgroup"
          public_network: "{{  hostvars[network]['public_network'] }}"
          network: "{{ hostvars[network]['inventory_hostname'] }}"
          subnet: "{{ hostvars[network]['subnet_name'] }}"
          common_secgroup: "{{ hostvars[network]['common_secgroup_name'] }}"
          use_config_drive: "{{ use_config_drive }}"
      register: stack

    - name: Update host variables of gateway
      vars:
        outputs: "{{ stack | stack_outputs }}"
      update_host:
        hostname: "{{ inventory_hostname }}"
        ansible_host: "{{ outputs.public_ip | mandatory }}"
        ansible_ssh_private_key_file: "{{ key_file }}"
        ansible_ssh_common_args: >
          -o StrictHostKeyChecking=No
          -o UserKnownHostsFile=/dev/null
        ansible_user: ubuntu
        ansible_python_interpreter: python3
        private_ip: "{{ outputs.private_ip }}"
        public_ip: "{{ outputs.public_ip | mandatory }}"

- name: Setup network gateway instances
  hosts: gateways
  # Run gather_facts (setup) manually to avoid a timing problem if the VM is
  # not booted yet
  gather_facts: false
  become: yes
  tags:
    - setup
  roles:
    - authorized-keys
  vars:

    authorized_user: ubuntu
  tasks:

    - name: Wait for gateway to show up
      wait_for_connection:
        timeout: 300

    - name: Gathering facts
      setup:

    - import_role:
        name: update_system

    - name: Install apt packages
      apt:
        update_cache: yes
        state: present
        name: "{{ packages }}"
      vars:
        packages:
          - ferm

    # --------------
    # Firewall Setup
    # --------------

    # Set ip forwarding on in /proc and in the sysctl file and reload if necessary
    - name: Enable IPv4 forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: true
        state: present
        reload: true

    - name: Create ferm (iptables) configuration
      vars:
        private_subnet_cidr: "{{ hostvars[network]['subnet_cidr'] }}"
      template:
        src: "{{ playbook_dir }}/files/gateway/ferm.conf.j2"
        dest: /etc/ferm/ferm.d/krake-gateway.conf

    - name: Restart ferm service
      service:
        name: ferm
        state: restarted
