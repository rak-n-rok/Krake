- name: Launch network gateway instances
  hosts: gateways
  module_defaults:
    ansible.builtin.setup:
      gather_timeout: 60
  gather_facts: false
  tasks:

    - name: Create Heat stack for gateway
      delegate_to: localhost
      os_stack:
        name: "{{ inventory_hostname }}"
        state: present
        template:  "{{ playbook_dir }}/files/gateway/stack.yml"
        parameters:
          instance_name: "{{ inventory_hostname }}"
          key: "{{ keypair }}"
          flavor: "{{ flavor }}"
          gateway_secgroup: "{{ inventory_hostname }}-secgroup"
          public_network: "{{  hostvars[network]['public_network'] }}"
          network: "{{ hostvars[network]['inventory_hostname'] }}"
          subnet: "{{ hostvars[network]['subnet_name'] }}"
          common_secgroup: "{{ hostvars[network]['common_secgroup_name'] }}"
          use_config_drive: "{{ use_config_drive }}"
          wireguard_port: "{{ wireguard_port }}"
      register: stack

    - name: Update host variables of gateway
      vars:
        outputs: "{{ stack | stack_outputs }}"
      update_host:
        hostname: "{{ inventory_hostname }}"
        ansible_host: "{{ outputs.public_ip | mandatory }}"
        ansible_ssh_private_key_file: "{{ key_file }}"
        ansible_ssh_common_args: >
          -o StrictHostKeyChecking=No
          -o UserKnownHostsFile=/dev/null
        ansible_user: ubuntu
        ansible_python_interpreter: python3
        private_ip: "{{ outputs.private_ip }}"
        public_ip: "{{ outputs.public_ip | mandatory }}"

    - name: Pause execution
      ansible.builtin.pause:
        seconds: 30


- name: Setup network gateway instances
  hosts: gateways
  module_defaults:
    ansible.builtin.setup:
      gather_timeout: 60
  # Run gather_facts (setup) manually to avoid a timing problem if the VM is
  # not booted yet
  gather_facts: false
  become: yes
  tags:
    - setup
  roles:
    - authorized-keys
  vars:
    authorized_user: ubuntu
    wg_conf_dir: "/etc/wireguard"
    wg_pub_key_path: "{{ wg_conf_dir }}/publickey"
    wg_priv_key_path: "{{ wg_conf_dir }}/privatekey"
  tasks:
    
    - name: Provision wireguard
      block: 

        - name: Wait for gateway to show up
          wait_for_connection:
            timeout: 600
            connect_timeout: 15

        - name: Gathering facts
          setup:

        - import_role:
            name: update_system

        - name: Install apt packages
          apt:
            update_cache: yes
            state: present
            name: "{{ packages }}"
          vars:
            packages:
              - wireguard
              - ferm

        - name: Check if wireguard private key was generated
          stat:
            path: "{{ wg_priv_key_path }}"
          register: private_key

        - name: Generate wireguard private key on the gateway
          shell: "umask 0077 && wg genkey > {{ wg_priv_key_path | quote }}"
          when: not private_key.stat.exists

        - name: Generate the server and client wireguard configurations
          tags:
            - wireguard_clients
          block:

          - name: Read the private key
            become: true
            slurp:
              src: "{{ wg_priv_key_path }}"
            register: wg_private_key_b64

          - set_fact:
              wg_private_key: "{{ wg_private_key_b64.content | b64decode }}"

          - name: Check if public key was generated
            stat:
              path: "{{ wg_pub_key_path }}"
            register: public_key
  
          - name: Generate wireguard public key on the gateway
            shell: "wg pubkey < {{ wg_priv_key_path|quote }} > {{ wg_pub_key_path|quote }}"
            when: not public_key.stat.exists

          - name: Read the public key
            become: true
            slurp:
              src: "{{ wg_pub_key_path }}"
            register: wg_public_key_b64

          - set_fact:
              wg_public_key: "{{ wg_public_key_b64.content | b64decode }}"

          - name: Create wireguard configuration on the gateway
            become: yes
            template:
              src: "{{ playbook_dir }}/files/gateway/server_wg0.conf.j2"
              dest: /etc/wireguard/wg0.conf
              mode: '0640'
            vars:
              wg_gateway_ip: "{{ vpn_cidr | network_hosts | first }}"
            register: gateway_conf_updated

          - name: Create the wireguard for each peer in host file
            become: no
            delegate_to: localhost
            run_once: yes
            template:
              src: "{{ playbook_dir }}/files/gateway/client_wg0.conf.j2"
              dest: "{{ client_wg_path }}"
              mode: '0640'
            vars:
              private_subnet_cidr: "{{ hostvars[network]['subnet_cidr'] }}"
              client_wg_path: "{{ etc_dir }}/wg_{{ item['name'] }}.conf"
              gateway_ip: "{{ hostvars[gateway].public_ip }}"
            loop: "{{ wireguard_peers }}"

        - name: Start and enable the wireguard service if the configuration changed
          become: yes
          service:
            name: wg-quick@wg0
            state: restarted
            enabled: yes
          when: gateway_conf_updated is defined

        # --------------
        # Firewall Setup
        # --------------

        # Set ip forwarding on in /proc and in the sysctl file and reload if necessary
        - name: Enable IPv4 forwarding
          sysctl:
            name: net.ipv4.ip_forward
            value: '1'
            sysctl_set: true
            state: present
            reload: true

        - name: Create ferm (iptables) configuration
          vars:
            private_subnet_cidr: "{{ hostvars[network]['subnet_cidr'] }}"
          template:
            src: "{{ playbook_dir }}/files/gateway/ferm.conf.j2"
            dest: /etc/ferm/ferm.d/krake-gateway.conf

        - name: Restart ferm service
          service:
            name: ferm
            state: restarted

      when: hostvars[gateway].wireguard_peers != []
