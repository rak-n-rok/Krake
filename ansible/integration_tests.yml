- name: Prepare Krake infrastructure for integration tests
  become: yes
  become_user: krake
  hosts: krake_apps
  tags:
    - prepare-tests
  roles:
    - authorized-keys
  vars:
    git_dir: /home/krake/git/krake
  tasks:

    - name: Configure the docker infrastructure for prometheus
      command: "{{ git_dir }}/docker/generate --config {{ git_dir }}/docker/docker.yaml {{ git_dir }}/docker/prometheus"

    - name: Remove Krake infrastructure
      docker_compose:
        project_src: "{{ git_dir }}/docker"
        files:
          - "{{ git_dir }}/docker/krake/docker-compose.yaml"
        state: absent

    - name: Start Krake infrastructure with prometheus
      docker_compose:
        project_src: "{{ git_dir }}/docker"
        files:
          - "{{ git_dir }}/docker/krake/docker-compose.yaml"
          - "{{ git_dir }}/docker/prometheus/docker-compose.yaml"
        state: present
        build: no

    - name: Bootstrap etcd database with the test-specific resources
      shell : >
        docker exec -i {{ api_host }} krake_bootstrap_db --force -
        {% if etcd_host is defined %} --db-host {{ etcd_host }} {% endif %}
        {% if etcd_port is defined %} --db-port {{ etcd_port }} {% endif %}
        < {{ git_dir }}/{{ item }}
      loop:
        - "docker/prometheus/bootstrap.yaml"
        - "support/static_metrics.yaml"


- name: Prepare variables for the OpenStack end-to-end tests
  hosts: 127.0.0.1
  connection: local
  tags:
  - test_openstack
  tasks:

  - name: Get OS_PROJECT_ID
    command: "openstack project show $OS_PROJECT_NAME -f value -c id"
    register: OS_PROJECT_ID_output

  - name: Prepare "os_project_id" variable
    set_fact:
      os_project_id: "{{ OS_PROJECT_ID_output.stdout }}"

  - name: Get OS_USER_ID
    command: "openstack user show -f value -c id $OS_USERNAME"
    register: OS_USER_ID_output

  - name: Prepare "os_user_id" variable
    set_fact:
      os_user_id: "{{ OS_USER_ID_output.stdout }}"

  - name: Prepare "os_password" variable
    set_fact:
      os_password: "{{ lookup('env', 'OS_PASSWORD') }}"

  - name: Prepare "os_auth_url" variable
    set_fact:
      os_auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"


- name: Running Krake integration tests
  become: yes
  become_user: krake
  hosts: krake_apps
  environment:
    # pytest and rok are installed locally in /home/krake/.local/bin which isn't in the
    # default PATH
    PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.local/bin"
    PYTEST_TIMEOUT: 1200
  vars:
    git_dir: /home/krake/git/krake
    test_dir: rak/functionals
    os_project_id: "{{ hostvars['127.0.0.1'].os_project_id }}"
    os_user_id: "{{ hostvars['127.0.0.1'].os_user_id }}"
    os_password: "{{ hostvars['127.0.0.1'].os_password }}"
    os_auth_url: "{{ hostvars['127.0.0.1'].os_auth_url }}"
    template_id: "{{ coe_template_output.id }}"
  tasks:
    - name: Run Krake Integration tests
      block:

        - name: Install Tests dependencies
          pip:
            name: "{{ git_dir }}/rak/[test]"
            state: present
            executable: pip3
            extra_args: --user
          tags:
            - always

        - name: Run integration tests for the core resources
          command: "pytest {{ git_dir }}/{{test_dir}}/integration/test_core.py"
          tags:
            - test_core

        # We need two Minikube clusters in order to run the integration tests
        - name: Check if two Minikube clusters have been spawned
          assert:
            that:
              - "groups['minikube_clusters'][0] is defined"
              - "groups['minikube_clusters'][1] is defined"
          tags:
            - always

        - name: Run integration tests for the scheduling algorithm
          command: "pytest {{ git_dir }}/{{test_dir}}/integration/test_scheduling.py --minikubeclusters {{ groups['minikube_clusters'][0] }} {{ groups['minikube_clusters'][1] }}"
          tags:
            - test_scheduling

        - name: Run integration tests for the migration of kubernetes applications
          command: "pytest {{ git_dir }}/{{test_dir}}/integration/test_kubernetes_migration.py --minikubeclusters {{ groups['minikube_clusters'][0] }} {{ groups['minikube_clusters'][1] }}"
          tags:
            - test_kubernetes_migration

        - name: Run integration tests for the Krake k8s resources update
          command: "pytest {{ git_dir }}/{{test_dir}}/integration/test_update.py --minikubeclusters {{ groups['minikube_clusters'][0] }} {{ groups['minikube_clusters'][1] }}"
          tags:
            - test_update

        - name: Run integration tests for the Kubernetes Observer
          command: "pytest {{ git_dir }}/{{test_dir}}/integration/test_kubernetes_observer.py --minikubeclusters {{ groups['minikube_clusters'][0] }} {{ groups['minikube_clusters'][1] }}"
          tags:
            - test_kubernetes_observer

        - name: Run integration tests for the hooks
          command: "pytest {{ git_dir }}/{{test_dir}}/integration/test_hooks.py --minikubeclusters {{ groups['minikube_clusters'][0] }} {{ groups['minikube_clusters'][1] }}"
          tags:
            - test_hooks

        - name: Run integration tests for krake scripts
          command: "pytest {{ git_dir }}/{{test_dir}}/integration/test_scripts.py --krake_container {{ api_host }} --etcd_container {{ etcd_host }} --etcd_container_port {{ etcd_port }}"
          tags:
            - test_scripts

        - name: Run integration tests for Openstack controller
          command: |
            pytest {{ git_dir }}/{{test_dir}}/integration/test_openstack.py
            --template-id {{ cluster_template_id }}
            --project-id {{ os_project_id}}
            --user-id {{ os_user_id }}
            --user-password {{ os_password }}
            --auth-url {{ os_auth_url }}
          when: cluster_template_id is defined
          tags:
            - test_openstack

        - name: Display warning for undefined variable for template ID
          debug:
            msg: >
              WARNING: the variable 'cluster_template_id' is not set, the integration
              tests for openstack will not be started. The other tests will run as
              expected. Please use
              'ansible-playbook integration_tests.yml --extra-vars "cluster_template_id=<template_id>"'
          when: cluster_template_id is not defined
          tags:
            - test_openstack

      always:

        - name: Save Krake containers logs
          shell: "docker logs {{ item }} > /tmp/{{ item }}.log"
          with_items:
            - krake-db
            - krake-api
            - krake_krake-ctrl-scheduler_1
            - krake_krake-ctrl-kubernetes-application_1
            - krake_krake-ctrl-garbage-collector_1
            - krake_krake-ctrl-magnum_1
          tags:
            - always

        - name: Create a tar.gz archive from the log files
          archive:
            path: /tmp/krake*.log
            dest: /tmp/krake_logs.tar.gz
            format: gz
          tags:
            - always

        - name: Download the Krake logs
          fetch:
            src: /tmp/krake_logs.tar.gz
            dest: E2E_logs/
            flat: true
          tags:
            - always
