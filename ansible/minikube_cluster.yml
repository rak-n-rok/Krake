- name: Launch Minikube VMs
  hosts: minikube_clusters
  module_defaults:
    ansible.builtin.setup:
      gather_timeout: 60
  gather_facts: false
  tasks:

    - name: Create Heat stack for Minikube VM
      delegate_to: localhost
      os_stack:
        name: "{{ inventory_hostname }}"
        state: present
        template: "{{ playbook_dir }}/files/minikube/stack.yml"
        parameters:
          instance_name: "{{ inventory_hostname }}"
          key: "{{ keypair }}"
          public_network: "{{  hostvars[network]['public_network'] }}"
          network: "{{ hostvars[network]['inventory_hostname'] }}"
          subnet: "{{ hostvars[network]['subnet_name'] }}"
          common_secgroup: "{{ hostvars[network]['common_secgroup_name'] }}"
          create_floating_ip: "{{ floating_ip }}"
          flavor: "{{ flavor }}"
          use_config_drive: "{{ use_config_drive }}"
          api_port: "{{ api_port }}"
      register: stack

    - name: Update host variables of Minikube VM
      vars:
        outputs: "{{ stack | stack_outputs }}"
        jump_host: "{{ hostvars[gateway].ansible_user }}@{{ hostvars[gateway].ansible_host }}"
        jump_key_file: "{{ hostvars[gateway].ansible_ssh_private_key_file or '~/.ssh/id_rsa' }}"
      update_host:
        hostname: "{{ inventory_hostname }}"
        ansible_host: "{{ outputs.private_ip }}"
        ansible_user: ubuntu
        ansible_ssh_common_args: '
          -o StrictHostKeyChecking=No
          -o UserKnownHostsFile=/dev/null
          -o ProxyCommand="ssh
              -o StrictHostKeyChecking=No
              -o UserKnownHostsFile=/dev/null
              {% if jump_key_file %} -i {{ jump_key_file }} {% endif %}
              -W %h:%p -q {{ jump_host }}"'
        ansible_ssh_private_key_file: "{{ key_file }}"
        ansible_python_interpreter: python3
        private_ip: "{{ outputs.private_ip }}"
        public_ip: "{{ outputs.public_ip | default(None) }}"

- name: Setup Minikube VMs
  hosts: minikube_clusters
  module_defaults:
    ansible.builtin.setup:
      gather_timeout: 60
  # Run gather_facts (setup) manually to avoid a timing problem if the VM is
  # not booted yet
  gather_facts: false
  become: yes
  tags:
    - setup
  roles:
    - authorized-keys
  vars:
    authorized_user: ubuntu
  tasks:

    - name: Wait for Minikube VM to show up
      wait_for_connection:
        timeout: 300

    - name: Gathering facts
      setup:

    - import_role:
        name: update_system

    - name: Install system packages
      apt:
        update_cache: yes
        state: present
        name: "{{ packages }}"
      vars:
        packages:
          - jq
          - haveged
          - python3-pip
          - conntrack
          - docker.io

    # FIXME: we shouldn't override the system wide pip and setuptools
    - name: Upgrade pip and setuptools to latest version
      pip:
        name:
          - pip
          - setuptools
      executable: pip3
      state: latest

    # TODO: Remove once issue is resolved
    #   C&H infra currently suffers from "MTU bug" when typical value of 1500 causes connectivity
    #   issues. Following is a workaround.
    - name: Configure Docker daemon MTU
      template:
        src: files/common/daemon.json.j2
        dest: /etc/docker/daemon.json
      when: docker_daemon_mtu is defined

    - name: Restart docker to reload the configuration
      systemd:
        name: docker
        state: restarted

    - name: Add hostname to /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "127.0.0.1 {{ name }}"

    - name: Set the machine's hostname
      copy:
        dest: "/etc/hostname"
        content: "{{ name }}"

    # Inspired from https://stackoverflow.com/questions/37333305/ansible-create-a-user-with-sudo-privileges
    - name: Create 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow members of 'wheel' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Add wheel and docker group to the ubuntu user
      user:
        name: ubuntu
        append: yes
        groups:
          - wheel # used for sudo
          - docker  # used for docker command without sudo

    - name: Create a hushlogin for user ubuntu
      become_user: ubuntu
      copy:
        content: ""
        dest: /home/ubuntu/.hushlogin
        force: no

    - name: Get kubectl latest version
      uri:
        url: https://storage.googleapis.com/kubernetes-release/release/stable.txt
        return_content: yes
      register: kubectl_latest_version
      when: kubectl_version == 'latest'

    - name: Get minikube and kubectl installation binaries
      vars:
        kubectl: "{{ kubectl_version if (kubectl_version != 'latest') else kubectl_latest_version.content | replace('\n', '') }}"
      get_url: url="{{ item.url }}" dest="{{ item.dest }}"
      with_items:
        - url: "https://storage.googleapis.com/minikube/releases/{{ minikube_version }}/minikube-linux-amd64"
          dest: "{{ minikube_install_dir }}/minikube"
        - url: "https://storage.googleapis.com/kubernetes-release/release/{{ kubectl }}/bin/linux/amd64/kubectl"
          dest: "{{ minikube_install_dir }}/kubectl"

    - name: Change binaries ownership, group and permissions
      file:
        path: "{{ minikube_install_dir }}/{{ item }}"
        owner: ubuntu
        group: ubuntu
        mode: '0755'
      with_items:
        - minikube
        - kubectl

# https://github.com/kubernetes/minikube/blob/master/docs/vmdriver-none.md
- name: Start Minikube clusters
  hosts: minikube_clusters
  module_defaults:
    ansible.builtin.setup:
      gather_timeout: 60
  tags:
    - start
  vars:
    home_dir: "/home/ubuntu"
  tasks:

    - name: Creates minikube and kube directories
      file:
        path: "{{ home_dir }}/{{ item }}"
        state: directory
      with_items:
        - ".minikube"
        - ".kube"

    - name: Touch a kube config file
      file:
        path: "{{ home_dir }}/.kube/config"
        state: touch

    # The error code 85 is raised when no minikube cluster is present yet.
    - name: Stop Minikube
      become_user: ubuntu
      command: minikube stop
      register: minikube_status
      failed_when: "minikube_status.rc != 85 and minikube_status.rc != 0"

    # The error code 7 is raised when a minikube cluster was present
    # and has been stopped beforehand.
    - name: Get Minikube status
      command: minikube status
      register: minikube_status
      failed_when: "minikube_status.rc != 85 and minikube_status.rc != 7"

    - name: Start Minikube
      become: yes
      command: >
        minikube start
          {{ '--apiserver-ips ' + public_ip if public_ip != "" else '' }}
          --vm-driver=none
          --apiserver-port "{{ api_port }}"
      environment:
        MINIKUBE_WANTUPDATENOTIFICATION: false
        MINIKUBE_WANTREPORTERRORPROMPT: false
        MINIKUBE_HOME: "{{ home_dir }}"
        CHANGE_MINIKUBE_NONE_USER: true
        KUBECONFIG: "{{ home_dir }}/.kube/config"

    - name: Change ownership of a minikube and kube directories
      become: yes
      file:
        path: "{{ home_dir }}/{{ item }}"
        state: directory
        recurse: yes
        owner: ubuntu
        group: ubuntu
      with_items:
        - ".minikube"
        - ".kube"

    - name: Get Minikube status
      command: minikube status
      register: minikube_status

    - name: Ensure Minikube cluster is running
      assert:
        that: "'{{ item }}: Running' in minikube_status.stdout_lines"
      with_items:
        - "host"
        - "kubelet"
        - "apiserver"

    - name: Ensure kubectl is configured correctly
      assert:
        that: "'kubeconfig: Configured' in minikube_status.stdout"

- name: Setup Minikube clusters
  hosts: minikube_clusters
  module_defaults:
    ansible.builtin.setup:
      gather_timeout: 60
  tags:
    - setup-cluster
  tasks:

- name: Download cluster certificates
  hosts: minikube_clusters
  module_defaults:
    ansible.builtin.setup:
      gather_timeout: 60
  tags:
    - cluster_certs
  tasks:
    - name: Download cluster certificates
      fetch:
        src: "{{ item }}"
        dest: cluster_certs
      with_items:
        - .minikube/ca.crt
        - .minikube/profiles/minikube/client.crt
        - .minikube/profiles/minikube/client.key

    - name: Generate kube config file
      delegate_to: localhost
      template:
        src: files/krake/kube_config.j2
        dest: "cluster_certs/{{ inventory_hostname }}/kube_config"
      vars:
        cert_dir: "{{ playbook_dir }}/cluster_certs"
        cluster_name: "{{ inventory_hostname }}"
        cluster_ip: "{{ public_ip|default(private_ip, true) }}"
        cluster_api_port: "{{ api_port }}"
