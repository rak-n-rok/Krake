- name: Launch k3s VMs
  hosts: k3s_clusters
  strategy: free
  gather_facts: false
  tasks:

    - name: Create Heat stack for k3s VM
      delegate_to: localhost
      os_stack:
        name: "{{ inventory_hostname }}"
        state: present
        template: "{{ playbook_dir }}/files/k3s/stack.yml"
        parameters:
          instance_name: "{{ inventory_hostname }}"
          key: "{{ keypair }}"
          public_network: "{{  hostvars[network]['public_network'] }}"
          network: "{{ hostvars[network]['inventory_hostname'] }}"
          subnet: "{{ hostvars[network]['subnet_name'] }}"
          common_secgroup: "{{ hostvars[network]['common_secgroup_name'] }}"
          create_floating_ip: "{{ floating_ip }}"
          flavor: "{{ flavor }}"
          use_config_drive: "{{ use_config_drive }}"
          api_port: "{{ api_port }}"
      register: stack

    - name: Update host variables of k3s VM
      vars:
        outputs: "{{ stack | stack_outputs }}"
        jump_host: "{{ hostvars[gateway].ansible_user }}@{{ hostvars[gateway].ansible_host }}"
        jump_key_file: "{{ hostvars[gateway].ansible_ssh_private_key_file or '~/.ssh/id_rsa' }}"
      update_host:
        hostname: "{{ inventory_hostname }}"
        ansible_host: "{{ outputs.private_ip }}"
        ansible_user: ubuntu
        ansible_ssh_common_args: '
          -o StrictHostKeyChecking=No
          -o UserKnownHostsFile=/dev/null
          -o ProxyCommand="ssh
              -o StrictHostKeyChecking=No
              -o UserKnownHostsFile=/dev/null
              {% if jump_key_file %} -i {{ jump_key_file }} {% endif %}
              -W %h:%p -q {{ jump_host }}"'
        ansible_ssh_private_key_file: "{{ key_file }}"
        ansible_python_interpreter: python3
        private_ip: "{{ outputs.private_ip }}"
        public_ip: "{{ outputs.public_ip | default(None) }}"


- name: Setup k3s VMs
  hosts: k3s_clusters
  strategy: free
  # Run gather_facts (setup) manually to avoid a timing problem if the VM is
  # not booted yet
  gather_facts: false
  become: yes
  tags:
    - setup
  roles:
    - authorized-keys
  vars:
    authorized_user: ubuntu
  tasks:

    - name: Wait for k3s VM to show up
      wait_for_connection:
        timeout: 600
        connect_timeout: 15

    - name: Gathering facts
      setup:

    - import_role:
        name: update_system

    - name: Install system packages
      apt:
        update_cache: yes
        state: present
        name: "{{ packages }}"
      vars:
        packages:
          - python3-pip

    # FIXME: we shouldn't override the system wide pip and setuptools
    - name: Upgrade pip and setuptools to latest version
      pip:
        name:
          - pip
          - setuptools
        executable: pip3
        state: latest

    # Inspired from https://stackoverflow.com/questions/37333305/ansible-create-a-user-with-sudo-privileges
    - name: Create 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow members of 'wheel' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Add wheel group to the ubuntu user
      user:
        name: ubuntu
        append: yes
        groups:
          - wheel # used for sudo

    - name: Create a hushlogin for user ubuntu
      become_user: ubuntu
      copy:
        content: ""
        dest: /home/ubuntu/.hushlogin
        force: no

    - name: Get k3s
      get_url: url="{{ item.url }}" dest="{{ item.dest }}"
      with_items:
        - url: "https://get.k3s.io"
          dest: "{{ k3s_install_dir }}/k3s"

    - name: Change binaries ownership, group and permissions
      file:
        path: "{{ k3s_install_dir }}/{{ item }}"
        owner: ubuntu
        group: ubuntu
        mode: '0755'
      with_items:
        - k3s

- name: Start k3s clusters
  hosts: k3s_clusters
  tags:
    - start
  vars:
    home_dir: "{{ k3s_install_dir }}"
  tasks:

    - name: Install 3ks version {{ k3s_version }}
      become_user: ubuntu
      shell:
        cmd: ./k3s
        chdir: "{{ k3s_install_dir }}"
      environment:
        INSTALL_K3S_VERSION: "{{ k3s_version }}"
      when: k3s_version is defined

    - name: Install 3ks latest stable version
      become_user: ubuntu
      shell:
        cmd: ./k3s
        chdir: "{{ k3s_install_dir }}"
      when: k3s_version is not defined

    - name: Change binaries ownership, group and permissions
      become: yes
      file:
        path: "/etc/rancher/k3s/k3s.yaml"
        owner: ubuntu
        group: ubuntu

    - name: Creates cert and config directorie
      file:
        path: "{{ home_dir }}/{{ item }}"
        state: directory
      with_items:
        - ".kube"
        - ".k3s"

    - name: Change ownership of directories
      become: yes
      file:
        path: "{{ home_dir }}/{{ item }}"
        state: directory
        recurse: yes
        owner: ubuntu
        group: ubuntu
      with_items:
        - ".kube"
        - ".k3s"


- name: Download cluster certificates
  hosts: k3s_clusters
  tags:
    - cluster_certs
  vars:
    path_k3s_kube_config_file: "/etc/rancher/k3s"
  tasks:

    - name: Generate k3s cluster certificates
      block:

        - name: Read in k3s config from stdout
          ansible.builtin.shell: "cat {{ path_k3s_kube_config_file }}/k3s.yaml"
          register: cat_k3s_config_result

        - name: Parse k3s config yaml into variable
          set_fact:
            k3s_config_file: "{{ cat_k3s_config_result.stdout | from_yaml }}"

        - name: Extract server_add
          set_fact:
            server_add: "{{ k3s_config_file['clusters'][0]['cluster']['server'] }}"

        - name: Extract cluster-authority-data
          set_fact:
            cluster_authority_data: "{{ k3s_config_file['clusters'][0]['cluster']['certificate-authority-data']  | b64decode }}"

        - name: Extract client-certificate-data
          set_fact:
            client_certificate_data: "{{ k3s_config_file['users'][0]['user']['client-certificate-data']  | b64decode }}"

        - name: Extract client-key-data
          set_fact:
            client_key_data: "{{ k3s_config_file['users'][0]['user']['client-key-data'] | b64decode }}"

        - name: Creates cert and config directory
          file:
            path: .k3s/profiles/k3s
            state: directory

        - name: Generate k3s ca.cert
          copy:
            content: "{{ cluster_authority_data }}"
            dest: .k3s/ca.crt

        - name: Generate k3s client.crt
          copy:
            content: "{{ client_certificate_data }}"
            dest: .k3s/profiles/k3s/client.crt

        - name: Generate k3s client.key
          copy:
            content: "{{ client_key_data }}"
            dest: .k3s/profiles/k3s/client.key

    - name: Download cluster certificates
      fetch:
        src: "{{ item }}"
        dest: cluster_certs
      with_items:
        - .k3s/ca.crt
        - .k3s/profiles/k3s/client.crt
        - .k3s/profiles/k3s/client.key

    - name: Creates directories
      delegate_to: localhost
      file:
        path: "cluster_certs/{{ inventory_hostname }}"
        state: directory

    - name: Generate kube config file
      delegate_to: localhost
      template:
        src: files/krake/kube_k3s_config.j2
        dest: "cluster_certs/{{ inventory_hostname }}/kube_config"
      vars:
        cert_dir: "{{ playbook_dir }}/cluster_certs"
        cluster_name: "{{ inventory_hostname }}"
        cluster_ip: "{{ public_ip|default(private_ip, true) }}"
        cluster_api_port: "{{ api_port }}"
