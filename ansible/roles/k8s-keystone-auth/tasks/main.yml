- name: Install k8s ansible module python requirements in virtualenv
  block:

    - name: Create k8s auth directory
      file:
        path: "{{ k8s_auth_dir }}"
        state: directory

    - name: Install virtualenv via pip
      become: yes
      become_user: root
      pip:
        name: virtualenv
        executable: pip3

    - name: Install k8s ansible module requirements
      pip:
        name:
          - openshift~=0.9.0
        virtualenv: "{{ k8s_auth_dir }}/venv"
        virtualenv_python: python3.6

- name: Generate and register a Self Signed OpenSSL k8s auth certificate
  block:

    - name: Create k8s auth cert directory
      file:
        path: "{{ k8s_auth_dir }}/certs"
        state: directory

    - name: Generate an OpenSSL private key.
      openssl_privatekey:
        path: "{{ k8s_auth_dir }}/certs/k8s_auth.key"

    - name: Generate an OpenSSL CSR.
      openssl_csr:
        path: "{{ k8s_auth_dir }}/certs/k8s_auth.csr"
        privatekey_path: "{{ k8s_auth_dir }}/certs/k8s_auth.key"
        common_name: "{{ ansible_host }}"

    # TODO For development purposes only. For production purposes need to be re-visited.
    - name: Generate a Self Signed OpenSSL k8s auth certificate
      openssl_certificate:
        path: "{{ k8s_auth_dir }}/certs/k8s_auth.crt"
        privatekey_path: "{{ k8s_auth_dir }}/certs/k8s_auth.key"
        csr_path: "{{ k8s_auth_dir }}/certs/k8s_auth.csr"
        provider: selfsigned

    - name: Register base64 encoded k8s auth cert
      slurp:
        src: "{{ k8s_auth_dir }}/certs/k8s_auth.crt"
      register: k8s_auth_crt_obj

    - name: Register base64 encoded k8s auth key
      slurp:
        src: "{{ k8s_auth_dir }}/certs/k8s_auth.key"
      register: k8s_auth_key_obj

# TODO Should be removed if trusted CA certificate takes place
# This will be done in: https://publicgitlab.cloudandheat.com/ragnarok/krake/issues/168
- name: Adjust Central IdP certificate
  block:

    - name: Register Central IdP certificate
      delegate_to: "{{ idp }}"
      shell: "cat $HOME/git/krake/infra/central_idp/scripts/cert.pem"
      register: cidp_cert

    - name: Copy Central IdP certificate to the K8S master node
      copy:
        content: "{{ cidp_cert.stdout }}"
        dest: "{{ k8s_auth_dir }}/certs/cidp.crt"

- name: Deploy k8s-keystone-auth
  vars:
    ansible_python_interpreter: "{{ k8s_auth_dir }}/venv/bin/python3.6"
  block:

    - name: Prepare the authorization policy
      k8s:
        kubeconfig: "{{ k8s_config }}"
        state: present
        definition: "{{ lookup('file', 'policy-config.yaml') }}"

    - name: Prepare the service certificates
      vars:
        k8s_auth_crt: "{{ k8s_auth_crt_obj['content'] }}"
        k8s_auth_key: "{{ k8s_auth_key_obj['content'] }}"
      k8s:
        kubeconfig: "{{ k8s_config }}"
        state: present
        definition: "{{ lookup('template', 'secret.yaml.j2') }}"

    - name: Create service account for k8s-keystone-auth
      k8s:
        kubeconfig: "{{ k8s_config }}"
        state: present
        definition: "{{ lookup('file', 'serviceaccount.yaml') }}"

    - name: Deploy k8s-keystone-auth StatefulSet and Service
      vars:
        keystone_auth_url: "https://central-idp:{{hostvars[idp].keystone_port}}/v3"
        cidp_ip: "{{hostvars[idp].ansible_host}}"
      k8s:
        kubeconfig: "{{ k8s_config }}"
        state: present
        definition: "{{ lookup('template', 'keystone-auth.yaml.j2') }}"

    - name: Get keystone-auth service object
      k8s_facts:
        kubeconfig: "{{ k8s_config }}"
        api_version: v1
        kind: Service
        name: keystone-auth
        namespace: kube-system
      register: keystone_auth_service

- name: Modify k8s apiserver config file to use the webhook service for authentication and authorization.
  become: yes
  become_user: root
  vars:
    k8s_webhook_path: "{{ k8s_path_minikube if minikube|default('') else k8s_path }}"
  block:

    - name: Copy webhook config file to the K8S master node
      vars:
        keystone_auth_service_addr: "{{ keystone_auth_service | json_query('resources[0].spec.clusterIP') }}"
      template:
        src: "webhookconfig.yaml.j2"
        dest: "{{ k8s_webhook_path }}/webhookconfig.yaml"

    - name: Searching for a webhook config file in k8s apiserver config file
      shell: "grep {{ k8s_webhook_path }}/webhookconfig.yaml {{ k8s_api_config }}"
      register: presence
      failed_when: presence.rc != 1 and presence.rc != 0

    - name: Modify authorization mode
      replace:
        path: "{{ k8s_api_config }}"
        regexp: "authorization-mode=Node,"
        replace: "authorization-mode=Node,Webhook,"
      when:  "presence.rc == 1"

    - name: Add webhook config file
      replace:
        path: "{{ k8s_api_config }}"
        regexp: "KUBE_API_ARGS=\""
        replace: "KUBE_API_ARGS=\"--authentication-token-webhook-config-file={{ k8s_webhook_path }}/webhookconfig.yaml
                  --authorization-webhook-config-file={{ k8s_webhook_path }}/webhookconfig.yaml "
      when:  "presence.rc == 1 and not(minikube|default(''))"

    - name: Add webhook config file minikube
      lineinfile:
        path: "{{ k8s_api_config }}"
        insertafter: ".*authorization-mode.*"
        line: "{{ item }}"
      with_items:
        - "    - --authorization-webhook-config-file={{ k8s_webhook_path }}/webhookconfig.yaml"
        - "    - --authentication-token-webhook-config-file={{ k8s_webhook_path }}/webhookconfig.yaml"
      when:  "presence.rc == 1 and minikube|default('')"

    - name: Restart kube-apiserver to pick up config changes
      systemd:
        name: kube-apiserver
        state: restarted
      when: "not(minikube|default(''))"
