- name: Launch microk8s VMs
  hosts: microk8s_clusters
  gather_facts: false
  tasks:

    - name: Create Heat stack for microk8s VM
      delegate_to: localhost
      os_stack:
        name: "{{ inventory_hostname }}"
        state: present
        template: "{{ playbook_dir }}/files/microk8s/stack.yml"
        parameters:
          instance_name: "{{ inventory_hostname }}"
          key: "{{ keypair }}"
          public_network: "{{  hostvars[network]['public_network'] }}"
          network: "{{ hostvars[network]['inventory_hostname'] }}"
          subnet: "{{ hostvars[network]['subnet_name'] }}"
          common_secgroup: "{{ hostvars[network]['common_secgroup_name'] }}"
          create_floating_ip: "{{ floating_ip }}"
          flavor: "{{ flavor }}"
          use_config_drive: "{{ use_config_drive }}"
          api_port: "{{ api_port }}"
      register: stack

    - name: Update host variables of microk8s VM
      vars:
        outputs: "{{ stack | stack_outputs }}"
        jump_host: "{{ hostvars[gateway].ansible_user }}@{{ hostvars[gateway].ansible_host }}"
        jump_key_file: "{{ hostvars[gateway].ansible_ssh_private_key_file or '~/.ssh/id_rsa' }}"
      update_host:
        hostname: "{{ inventory_hostname }}"
        ansible_host: "{{ outputs.private_ip }}"
        ansible_user: ubuntu
        ansible_ssh_common_args: '
          -o StrictHostKeyChecking=No
          -o UserKnownHostsFile=/dev/null
          -o ProxyCommand="ssh
              -o StrictHostKeyChecking=No
              -o UserKnownHostsFile=/dev/null
              {% if jump_key_file %} -i {{ jump_key_file }} {% endif %}
              -W %h:%p -q {{ jump_host }}"'
        ansible_ssh_private_key_file: "{{ key_file }}"
        ansible_python_interpreter: python3
        private_ip: "{{ outputs.private_ip }}"
        public_ip: "{{ outputs.public_ip | default(None) }}"

- name: Setup microk8s VMs
  hosts: microk8s_clusters
  # Run gather_facts (setup) manually to avoid a timing problem if the VM is
  # not booted yet
  gather_facts: false
  become: yes
  tags:
    - setup
  roles:
    - authorized-keys
  vars:
    authorized_user: ubuntu
  tasks:

    - name: Wait for microk8s VM to show up
      wait_for_connection:
        timeout: 300

    - name: Gathering facts
      setup:

    - import_role:
        name: update_system

    - name: Install system packages
      apt:
        update_cache: yes
        state: present
        name: "{{ packages }}"
      vars:
        packages:
          - python3-pip

    # Inspired from https://stackoverflow.com/questions/37333305/ansible-create-a-user-with-sudo-privileges
    - name: Create 'wheel' group
      group:
        name: wheel
        state: present
      
    - name: Allow members of 'wheel' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Add wheel and docker group to the ubuntu user
      user:
        name: ubuntu
        append: yes
        groups:
          - wheel # used for sudo

    - name: Create a hushlogin for user ubuntu
      become_user: ubuntu
      copy:
        content: ""
        dest: /home/ubuntu/.hushlogin
        force: no

- name: Install and start microk8s clusters
  hosts: microk8s_clusters
  tags:
    - start
  vars:
    home_dir: "{{ microk8s_install_dir }}"
  tasks:

    - name: Install microk8s via snap
      become: true
      community.general.snap:
        name: microk8s
        classic: true
        channel: "{{ microk8s_version }}"

    - name: Add microk8s group to the ubuntu user
      become: true
      user:
        name: ubuntu
        append: yes
        groups:
          - microk8s

    - name: reset ssh connection
      meta: reset_connection

    - name: Create symbolic link to microk8s kubectl
      become: true
      copy:
        src: "files/microk8s/kubectl_link"
        dest: "/usr/bin/kubectl"
        mode: "0755"

    - name: Change ownership of link
      become: yes
      file:
        path: "/usr/bin/kubectl"
        owner: ubuntu
        group: ubuntu


- name: Generate microk8s clusters certificates
  hosts: microk8s_clusters
  tags:
    - cluster_certs
  vars:
    home_dir: "{{ microk8s_install_dir }}"
  tasks:

    - name: Creates cert and config directorie
      file:
        path: "{{ home_dir }}/{{ item }}"
        state: directory
      with_items:
        - ".kube"
        - ".microk8s"

    - name: Change ownership of directories
      become: yes
      file:
        path: "{{ home_dir }}/{{ item }}"
        state: directory
        recurse: yes
        owner: ubuntu
        group: ubuntu
      with_items:
        - ".kube"
        - ".microk8s"

    - name: Generate microk8s cluster certificates
      block:

        - name: Read in microk8s config from stdout
          become: true
          ansible.builtin.shell: "microk8s config"
          register: microk8s_config_result
  
        - name: Parse microk8s config yaml into variable
          set_fact:
            microk8s_config_file: "{{ microk8s_config_result.stdout | from_yaml }}"

        - name: Extract server_add
          set_fact:
            server_add: "{{ microk8s_config_file['clusters'][0]['cluster']['server'] }}"

        - name: Extract cluster-authority-data
          set_fact:
            cluster_authority_data: "{{ microk8s_config_file['clusters'][0]['cluster']['certificate-authority-data']  | b64decode }}"

        - name: Extract client-token
          set_fact:
            microk8s_client_token: "{{ microk8s_config_file['users'][0]['user']['token'] }}"

        - name: Creates cert and config directory
          file:
            path: .microk8s/profiles/microk8s
            state: directory

        - name: Generate microk8s ca.cert
          copy: 
            content: "{{ cluster_authority_data }}"
            dest: .microk8s/ca.crt

        - name: Generate microk8s token
          copy: 
            content: "{{ microk8s_client_token }}"
            dest: .microk8s/token

    - name: Download cluster certificates
      fetch:
        src: "{{ item }}"
        dest: cluster_certs
      with_items:
        - .microk8s/ca.crt
        - .microk8s/token

    - name: Creates directories
      delegate_to: localhost
      file:
        path: "cluster_certs/{{ inventory_hostname }}"
        state: directory

    - name: Generate kube config file
      delegate_to: localhost
      template:
        src: files/krake/kube_microk8s_config.j2
        dest: "cluster_certs/{{ inventory_hostname }}/kube_config"
      vars:
        cert_dir: "{{ playbook_dir }}/cluster_certs"
        cluster_name: "{{ inventory_hostname }}"
        cluster_add: "{{ server_add }}"
        client_token: "{{ microk8s_client_token }}"

    - name: Generate kube config template file
      delegate_to: localhost
      template:
        variable_start_string: "&%" 
        variable_end_string: "%&"
        src: files/krake/kube_microk8s_config.j2
        dest: "cluster_certs/{{ inventory_hostname }}/mk8s_config.j2"
      vars:
        cluster_add: "{{ server_add }}"
        cluster_name: "{{ inventory_hostname }}"
        client_token: "{{ microk8s_client_token }}"
