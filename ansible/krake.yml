- name: Launch Krake VMs
  hosts: krake_apps
  gather_facts: false
  tasks:

    - name: Create Heat stack for Krake VM
      delegate_to: localhost
      os_stack:
        name: "{{ inventory_hostname }}"
        state: present
        template: "{{ playbook_dir }}/files/krake/stack.yml"
        parameters:
          key: "{{ keypair }}"
          instance_name: "{{ inventory_hostname }}"
          create_floating_ip: "{{ floating_ip }}"
          network: "{{ hostvars[network].inventory_hostname }}"
          subnet: "{{ hostvars[network].subnet_name }}"
          public_network: "{{ hostvars[network].public_network }}"
          common_secgroup: "{{ hostvars[network].common_secgroup_name }}"
          flavor: "{{ flavor }}"
          use_config_drive: "{{ use_config_drive }}"
      register: stack

    - name: Update host variables
      vars:
        outputs: "{{ stack | stack_outputs }}"
        jump_host: "{{ hostvars[gateway].ansible_user }}@{{ hostvars[gateway].ansible_host }}"
        jump_key_file: "{{ hostvars[gateway].ansible_ssh_private_key_file or '~/.ssh/id_rsa' }}"
      update_host:
        hostname: "{{ inventory_hostname }}"
        ansible_host: "{{ outputs.private_ip }}"
        ansible_user: ubuntu
        ansible_ssh_common_args: '
          -o StrictHostKeyChecking=No
          -o UserKnownHostsFile=/dev/null
          -o ProxyCommand="ssh
              -o StrictHostKeyChecking=No
              -o UserKnownHostsFile=/dev/null
              {% if jump_key_file %} -i {{ jump_key_file }} {% endif %}
              -W %h:%p -q {{ jump_host }}"'
        ansible_ssh_private_key_file: "{{ key_file }}"
        ansible_python_interpreter: python3
        private_ip: "{{ outputs.private_ip }}"
        public_ip: "{{ outputs.public_ip | default(None) }}"

- name: Setup Krake VMs
  become: yes
  # Run gather_facts (setup) manually to avoid a timing problem if the VM is
  # not booted yet
  gather_facts: no
  hosts: krake_apps
  tasks:

    - name: Wait for Krake VM to show up
      wait_for_connection:
        timeout: 300

    - name: Gathering facts
      setup:

    # Replace default mirror with a faster one
    - name: Copy sources.list
      copy:
        src: "{{ playbook_dir }}/files/krake/sources.list"
        dest: /etc/apt/sources.list

    - name: Install system packages
      apt:
        update_cache: yes
        state: present
        name: "{{ packages }}"
      vars:
        packages:
          - jq
          - python3-pip
          - haveged

          # Docker dependencies
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg

    - name: Add Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} stable

    - name: Install Docker CE
      apt:
        name: docker-ce

    - name: Install Docker-Compose
      pip:
        name: docker-compose

    # Inspired from https://stackoverflow.com/questions/37333305/ansible-create-a-user-with-sudo-privileges
    - name: Create 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow members of 'wheel' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Create user 'krake'
      user:
        name: krake
        append: yes
        groups:
          - docker
          - wheel # used for sudo
        create_home: yes
        state: present
        shell: /bin/bash
        home: /home/krake

    - name: Create a hushlogin for user krake
      become_user: krake
      copy:
        content: ""
        dest: /home/krake/.hushlogin
        force: no

    - name: Configure Docker daemon MTU
      template:
        src: files/krake/daemon.json.j2
        dest: /etc/docker/daemon.json

    - name: Restart docker to reload the configuration
      systemd:
        name: docker
        state: restarted

    - name: Add hostname to /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "127.0.0.1 {{ hostname }}"

    - name: Set the machine's hostname
      copy:
        dest: "/etc/hostname"
        content: "{{ hostname }}"

    - name: Create .ssh directory
      file:
        path: /home/krake/.ssh
        state: directory
        mode: 0770
        owner: krake
        group: krake

    - name: Copy 'authorized_keys' from user 'ubuntu' to user 'krake'
      copy:
        remote_src: yes
        src: /home/ubuntu/.ssh/authorized_keys
        dest: /home/krake/.ssh/authorized_keys
        owner: krake
        mode: 0600

- name: Manage Krake VM
  become: yes
  become_user: krake
  hosts: krake_apps
  tags:
    - manage
  roles:
    - authorized-keys
  vars:
    git_dir: /home/krake/git/krake
    repo_dir: "{{ playbook_dir }}/.."
    # Directory on the VM for the bind mount, to store the configuration files of Krake
    configuration_dir: /etc/krake
    authorized_user: krake

  tasks:

    - name: Create git sub-directory
      become_user: root
      file:
        path: "{{ git_dir }}"
        state: directory
        owner: krake
        group: krake

    - name: Synchronize local and remote repository
      tags:
        - synchronize
        - code
      block:
        # rsync is executed on the localhost
        - name: Copy files with rsync
          synchronize:
            dirs: true
            checksum: true
            perms: true
            rsync_opts:
              - --itemize-changes
              - "--exclude=.git/"
              - "--exclude=.gitlab/"
              - "--exclude=.idea"
              - "--exclude-from={{ repo_dir }}/.gitignore"
            src: "{{ repo_dir }}"
            dest: "{{ git_dir }}"
            delete: yes
            use_ssh_args: true

        # rsync does not honour become_user
        - name: Set correct permissions
          become_user: root
          file:
            recurse: true
            path: "{{ git_dir }}"
            state: directory
            owner: krake
            group: krake

    - name: Krake infrastructure deployment
      tags:
        - krake-deployment
      block:

        # The docker-compose.override only contains the network definition and
        # will automatically be merged with docker-compose.yml when
        # "docker-compose up" is run.
        - name: Configure krake_default bridge MTU
          template:
            src: files/krake/docker-compose.override.yml.j2
            dest: "{{ git_dir }}/docker/krake/docker-compose.override.yml"

        - name: Generate dot env configuration file
          template:
            src: "{{ repo_dir }}/docker/krake/.env.j2"
            dest: "{{ git_dir }}/docker/krake/.env"
            owner: krake
            group: krake

        - name: Remove Krake infrastructure
          docker_service:
            project_src: "{{ git_dir }}/docker/krake"
            state: absent

        - name: Remove Krake image
          docker_image:
            name: krake:latest
            state: absent

        - name: Create configuration directory
          become_user: root
          file:
            path: "{{ configuration_dir }}"
            state: directory
            owner: krake
            group: krake

        - name: Create configuration certificates sub-directory
          become_user: root
          file:
            path: "{{ configuration_dir }}/certs"
            state: directory
            owner: krake
            group: krake


        # The files generated overwrite the ones created
        - name: Generate the configuration files
          script: |
            {{ repo_dir }}/config/generate --dst {{ configuration_dir }}\
            {% if enable_tls is defined and enable_tls %} --tls-enabled {% endif %} \
            {% if enable_tls is defined and enable_tls %} --cert-dir /etc/krake/certs {% endif %} \
            {% if api_host is defined %} --host {{ api_host }} {% endif %} \
            {% if api_port is defined %} --port {{ api_port }} {% endif %} \
            {% if etcd_host is defined %} --etcd-host {{ etcd_host }} {% endif %} \
            {% if etcd_port is defined %} --etcd-port {{ etcd_port }} {% endif %} \
            {% if worker_count is defined %} --worker-count {{ worker_count }} {% endif %} \
            {% if debounce is defined %} --debounce {{ debounce }} {% endif %} \
            {{ git_dir }}/config/*template

        - name: Build Krake image
          docker_image:
            name: krake:latest
            dockerfile: "{{ git_dir }}/docker/krake/Dockerfile"
            path: "{{ git_dir }}"
            nocache: yes

        - name: Start Krake infrastructure
          docker_service:
            project_src: "{{ git_dir }}/docker/krake"
            state: present
            build: no

    - name: Krake rok deployment
      tags:
        - krake-rok-deployment
      block:

        # Add the path to directory to look for the Rok configuration file
        - name: Add the rok config path to profile
          lineinfile:
            path: /home/krake/.profile
            regexp: '^export XDG_CONFIG_HOME='
            line: "export XDG_CONFIG_HOME={{ git_dir }}"

        - name: Install Krake rok
          tags:
            - synchronize
            - pip
          pip:
            name: "{{ git_dir }}/rok"

        - name: Create Krake rok configuration file
          script: |
            {{ repo_dir }}/config/generate --dst {{ git_dir }} \
            {% if enable_tls is defined and enable_tls %} --tls-enabled {% endif %} \
            {% if enable_tls is defined and enable_tls %} --cert-dir /etc/krake/certs {% endif %} \
            --host localhost \
            {% if api_port is defined %} --port {{ api_port }} {% endif %} \
            {{ git_dir }}/rok.yaml.template

- name: Generate cluster config
  become: yes
  become_user: krake
  hosts: krake_apps
  vars:
    - krake_homedir: /home/krake
    - cert_dir: "{{ krake_homedir }}/clusters/certs/"
  tags:
    - cluster_certs
  tasks:
    - block:

      - name: Create directory to host clusters infos
        file:
          path: "{{ krake_homedir }}/clusters/config"
          state: directory

      - name: Upload certificates directory
        copy:
          src: cluster_certs/
          dest: "{{ cert_dir }}"
          mode: preserve

      - name: Generate kube config file
        template:
          src: files/krake/kube_config.j2
          dest: "{{ krake_homedir }}/clusters/config/{{ item }}"
        vars:
          cluster_name: "{{ item }}"
          cluster_ip: "{{ hostvars[item]['private_ip'] }}"
          cluster_api_port: "{{ hostvars[item]['api_port'] }}"
        with_items: "{{ groups['minikube_clusters'] }}"

      when: groups['minikube_clusters'] is defined
