- name: Launch Krake VMs
  hosts: krake_apps
  module_defaults:
    ansible.builtin.setup:
      gather_timeout: 60
  gather_facts: false
  tasks:

    - name: Create Heat stack for Krake VM
      delegate_to: localhost
      os_stack:
        name: "{{ inventory_hostname }}"
        state: present
        template: "{{ playbook_dir }}/files/krake/stack.yml"
        parameters:
          key: "{{ keypair }}"
          instance_name: "{{ inventory_hostname }}"
          create_floating_ip: "{{ floating_ip }}"
          network: "{{ hostvars[network].inventory_hostname }}"
          subnet: "{{ hostvars[network].subnet_name }}"
          public_network: "{{ hostvars[network].public_network }}"
          common_secgroup: "{{ hostvars[network].common_secgroup_name }}"
          flavor: "{{ flavor }}"
          use_config_drive: "{{ use_config_drive }}"
      register: stack

    - name: Update host variables
      vars:
        outputs: "{{ stack | stack_outputs }}"
        jump_host: "{{ hostvars[gateway].ansible_user }}@{{ hostvars[gateway].ansible_host }}"
        jump_key_file: "{{ hostvars[gateway].ansible_ssh_private_key_file or '~/.ssh/id_rsa' }}"
      update_host:
        hostname: "{{ inventory_hostname }}"
        ansible_host: "{{ outputs.private_ip }}"
        ansible_user: ubuntu
        ansible_ssh_common_args: '
          -o StrictHostKeyChecking=No
          -o UserKnownHostsFile=/dev/null
          -o ProxyCommand="ssh
              -o StrictHostKeyChecking=No
              -o UserKnownHostsFile=/dev/null
              {% if jump_key_file %} -i {{ jump_key_file }} {% endif %}
              -W %h:%p -q {{ jump_host }}"'
        ansible_ssh_private_key_file: "{{ key_file }}"
        ansible_python_interpreter: python3
        private_ip: "{{ outputs.private_ip }}"
        public_ip: "{{ outputs.public_ip | default(None) }}"


- name: Setup Krake VMs
  become: yes
  # Run gather_facts (setup) manually to avoid a timing problem if the VM is
  # not booted yet
  gather_facts: no
  hosts: krake_apps
  module_defaults:
    ansible.builtin.setup:
      gather_timeout: 60
  tasks:

    - name: Wait for Krake VM to show up
      wait_for_connection:
        timeout: 600
        connect_timeout: 15

    - name: Gathering facts
      setup:

    - import_role:
        name: update_system

    - name: Install system packages
      apt:
        update_cache: yes
        state: present
        name: "{{ packages }}"
      vars:
        packages:
          - acl
          - jq
          - haveged
          - python3-pip
          # - docker.io
          - golang-cfssl
          - etcd-client

    # FIXME: we shouldn't override the system wide pip and setuptools
    - name: Upgrade pip and setuptools to latest version
      pip:
        name:
          - pip
          - setuptools
        executable: pip3
        state: latest

    - name: Prepare GPG key for kubectl
      ansible.builtin.shell: mkdir /etc/apt/keyrings/
      ignore_errors: true

    - name: Add GPG key for kubectl
      ansible.builtin.shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      ignore_errors: true

    - name: Add APT repository for kubectl
      ansible.builtin.shell: echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list
      ignore_errors: true

    - name: Update apt packages
      apt:
        update_cache: yes

    - name: Install kubectl
      apt:
        name: kubectl

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true

    # Inspired from https://stackoverflow.com/questions/37333305/ansible-create-a-user-with-sudo-privileges
    - name: Create 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow members of 'wheel' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Create user 'krake'
      user:
        name: krake
        append: yes
        groups:
          - docker
          - wheel # used for sudo
        create_home: yes
        state: present
        shell: /bin/bash
        home: /home/krake

    - name: Create a hushlogin for user krake
      become_user: krake
      copy:
        content: ""
        dest: /home/krake/.hushlogin
        force: no

    - name: Configure Docker daemon MTU
      template:
        src: files/common/daemon.json.j2
        dest: /etc/docker/daemon.json

    - name: Restart docker to reload the configuration
      systemd:
        name: docker
        state: restarted

    - name: Add hostname to /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "127.0.0.1 {{ hostname }}"

    - name: Set the machine's hostname
      copy:
        dest: "/etc/hostname"
        content: "{{ hostname }}"

    - name: Create .ssh directory
      file:
        path: /home/krake/.ssh
        state: directory
        mode: 0770
        owner: krake
        group: krake

    - name: Copy 'authorized_keys' from user 'ubuntu' to user 'krake'
      copy:
        remote_src: yes
        src: /home/ubuntu/.ssh/authorized_keys
        dest: /home/krake/.ssh/authorized_keys
        owner: krake
        mode: 0600

- name: Manage Krake VM
  become: yes
  become_user: krake
  hosts: krake_apps
  module_defaults:
    ansible.builtin.setup:
      gather_timeout: 60
  tags:
    - manage
  roles:
    - authorized-keys
  vars:
    git_dir: /home/krake/git/krake
    repo_dir: "{{ playbook_dir }}/.."
    # Directory on the VM for the bind mount, to store the configuration files of Krake
    configuration_dir: /etc/krake
    authorized_user: krake
    krakectl_configuration_dir: /etc/krakectl
    scheme: "{% if enable_tls is defined and enable_tls %}https{% else %}http{% endif %}"
    api_endpoint: "{{ scheme }}://{{ private_ip }}:{{ api_port }}"
    # Host or IP from which the Krake API is accessible externally.
    external_host: "{% if external_endpoint is defined %}{{ external_endpoint | urlsplit('hostname') }}{% else %}{{ private_ip }}{% endif %}"

  tasks:

    - name: Create git sub-directory
      become_user: root
      file:
        path: "{{ git_dir }}"
        state: directory
        owner: krake
        group: krake

    - name: Synchronize local and remote repository
      tags:
        - synchronize
        - code
      block:
        # rsync is executed on the localhost
        # Separating the directory synchronization allows for a faster task
        - name: Copy files with rsync
          synchronize:
            dirs: true
            checksum: true
            perms: true
            rsync_opts:
              - --itemize-changes
            src: "{{ repo_dir }}/{{ item }}"
            dest: "{{ git_dir }}/"
            delete: yes
            use_ssh_args: true
          loop:
            - docker
            - krake
            - rak
            - krakectl
            - requirements
            - templates
            - support

        # rsync does not honour become_user
        - name: Set correct permissions
          become_user: root
          file:
            recurse: true
            path: "{{ git_dir }}"
            state: directory
            owner: krake
            group: krake

    - name: Install pip and dependencies
      tags:
        - pip
      block:
        - name: Install Krake docker dependencies
          pip:
            name:
              - Jinja2
              - docker
              - docker-compose
            executable: pip3
            extra_args: --user --no-build-isolation

    - name: Krake infrastructure deployment
      tags:
        - krake-deployment
      block:
        # The files generated overwrite the ones created
        - name: Generate the docker configuration file
          script: |
            {{ repo_dir }}/krake/scripts/krake_generate_config --dst {{ git_dir }}/docker \
            {% if enable_tls is defined and enable_tls %} --tls-enabled {% endif %} \
            {% if api_host is defined %} --api-host {{ api_host }} {% endif %} \
            {% if api_port is defined %} --api-port {{ api_port }} {% endif %} \
            {% if etcd_host is defined %} --etcd-host {{ etcd_host }} {% endif %} \
            {% if etcd_port is defined %} --etcd-port {{ etcd_port }} {% endif %} \
            {% if etcd_peer_port is defined %} --etcd-peer-port {{ etcd_peer_port }} {% endif %} \
            {% if cert_dir is defined %} --cert-dir {{ cert_dir }} {% endif %} \
            {{ git_dir }}/docker/docker.yaml.template

        - name: Configure the docker infrastructure
          command: "{{ git_dir }}/docker/generate --config {{ git_dir }}/docker/docker.yaml {{ git_dir }}/docker/krake"

        - name: Remove Krake infrastructure
          community.docker.docker_compose_v2:
            project_src: "{{ git_dir }}/docker"
            files:
              - "{{ git_dir }}/docker/krake/docker-compose.yaml"
            state: absent

        - name: Remove Krake image
          docker_image:
            name: krake:latest
            state: absent
          tags:
            - build_krake_image

        - name: Create configuration directory
          become_user: root
          file:
            path: "{{ configuration_dir }}"
            state: directory
            owner: krake
            group: krake
            recurse: yes

        - name: Create configuration certificates sub-directory
          become_user: root
          file:
            path: "{{ configuration_dir }}/certs"
            state: directory
            owner: krake
            group: krake
          when: enable_tls is defined and enable_tls

        - name: Generate certificates for all the Krake components
          command: >
            {{ git_dir }}/support/pki {{ item }}
            --dest-dir {{ configuration_dir }}/certs
            --host {{ external_host }}
            --host {{ api_host }}
            --ignore
          loop:
            - system:api-server
            - system:scheduler
            - system:gc
            - system:kubernetes-application
            - system:kubernetes-cluster
            - system:infrastructure
            - system:magnum
            - system:admin
          when: enable_tls is defined and enable_tls

        - name: Generate all signing certificates
          command: >
            {{ git_dir }}/support/pki {{ item }}
            --dest-dir {{ configuration_dir }}/certs
            --intermediate-ca --ignore
          loop:
            - system:complete-signing
            - system:shutdown-signing
          when: enable_tls is defined and enable_tls

        - name: Get a list of all Krake components' configuration files
          find:
            paths: "{{ git_dir }}/templates/config"
            patterns: "*.template"
          register: template_files

        # The files generated overwrite the ones created
        - name: Generate the configuration files
          script: |
            {{ repo_dir }}/krake/scripts/krake_generate_config --dst {{ configuration_dir }}\
            {% if enable_tls is defined and enable_tls %} --tls-enabled {% endif %} \
            {% if cert_dir is defined %} --cert-dir {{ cert_dir }} {% endif %} \
            {% if cors_origin is defined and cors_origin %} --cors-origin {{ cors_origin }} {% endif %} \
            {% if allow_anonymous is defined and allow_anonymous %} --allow-anonymous {% endif %} \
            {% if keystone_authentication_enabled is defined and keystone_authentication_enabled %} --keystone-authentication-enabled {% endif %} \
            {% if keystone_authentication_endpoint is defined %} --keystone-authentication-endpoint {{ keystone_authentication_endpoint }} {% endif %} \
            {% if keycloak_authentication_enabled is defined and keycloak_authentication_enabled %} --keycloak-authentication-enabled {% endif %} \
            {% if keycloak_authentication_endpoint is defined %} --keycloak-authentication-endpoint {{ keycloak_authentication_endpoint }} {% endif %} \
            {% if keycloak_authentication_realm is defined %} --keycloak-authentication-realm {{ keycloak_authentication_realm }} {% endif %} \
            {% if static_authentication_enabled is defined and static_authentication_enabled %} --static-authentication-enabled {% endif %} \
            {% if static_authentication_username is defined %} --static-authentication-username {{ static_authentication_username }} {% endif %} \
            {% if authorization_mode is defined %} --authorization-mode {{ authorization_mode }} {% endif %} \
            {% if api_host is defined %} --api-host {{ api_host }} {% endif %} \
            {% if api_port is defined %} --api-port {{ api_port }} {% endif %} \
            {% if etcd_host is defined %} --etcd-host {{ etcd_host }} {% endif %} \
            {% if etcd_port is defined %} --etcd-port {{ etcd_port }} {% endif %} \
            --worker-count {{ worker_count }} \
            --debounce {{ debounce }} \
            {% if reschedule_after is defined %} --reschedule-after {{ reschedule_after }} {% endif %} \
            {% if stickiness is defined %} --stickiness {{ stickiness }} {% endif %} \
            {% if poll_interval is defined %} --poll-interval {{ poll_interval }} {% endif %} \
            {% if complete_hook_user is defined %} --complete-hook-user {{ complete_hook_user }} {% endif %} \
            {% if complete_hook_cert_dest is defined %} --complete-hook-cert-dest {{ complete_hook_cert_dest }} {% endif %} \
            {% if complete_hook_env_token is defined %} --complete-hook-env-token {{ complete_hook_env_token }} {% endif %} \
            {% if complete_hook_env_url is defined %} --complete-hook-env-url {{ complete_hook_env_url }} {% endif %} \
            {% if external_endpoint is defined or use_private_ip %} --external-endpoint {{ final_external_endpoint }} {% endif %} \
            {% if shutdown_hook_user is defined %} --shutdown-hook-user {{ shutdown_hook_user }} {% endif %} \
            {% if shutdown_hook_cert_dest is defined %} --shutdown-hook-cert-dest {{ shutdown_hook_cert_dest }} {% endif %} \
            {% if shutdown_hook_env_token is defined %} --shutdown-hook-env-token {{ shutdown_hook_env_token }} {% endif %} \
            {% if shutdown_hook_env_url is defined %} --shutdown-hook-env-url {{ shutdown_hook_env_url }} {% endif %} \
            {% if logging_level is defined %} --logging-level {{ logging_level }} {% endif %} \
            {% if logging_handler is defined %} --logging-handler {{ logging_handler }} {% endif %} \
            {{ template_path }}
          vars:
            template_path: "{{ item.path }}"
            final_file: "{{ template_path | basename | splitext | first }}"
            prefix: "{{ final_file | splitext | first }}"
            worker_count: "{{ controllers[prefix]['worker_count'] | default(controllers['worker_count']) }}"
            debounce: "{{ controllers[prefix]['debounce'] | default(controllers['debounce']) }}"
            logging_level: "{{ controllers[prefix]['logging_level'] | default(controllers['logging_level']) }}"
            logging_handler: "{{ controllers[prefix]['logging_handler'] | default(controllers['logging_handler']) }}"
            external_endpoint_with_scheme: "{{ scheme }}://{{ external_host }}:{{ api_port }}"
            final_external_endpoint: "{% if external_endpoint is defined %}{{ external_endpoint }}{% elif use_private_ip %}{{ external_endpoint_with_scheme }}{% endif %}"
          with_items:
            - "{{ template_files.files }}"

        - name: Change permissions of the configuration directory
          become_user: root
          file:
            path: "{{ configuration_dir }}"
            owner: "{{ krake_image_uid }}"
            group: "{{ krake_image_uid }}"
            recurse: yes

        - name: Build Krake image
          docker_image:
            name: krake:latest
            source: build
            build:
              dockerfile: "{{ git_dir }}/docker/krake/Dockerfile"
              pull: yes
              path: "{{ git_dir }}"
              nocache: yes
              args:
                krake_uid: "{{ krake_image_uid }}"
          tags:
            - build_krake_image
          environment:
            - DOCKER_BUILDKIT: 1

        - name: Start Krake infrastructure
          community.docker.docker_compose_v2:
            project_src: "{{ git_dir }}/docker"
            files:
              - "{{ git_dir }}/docker/krake/docker-compose.yaml"
            state: present
            build: policy

        - name: Bootstrap etcd database
          shell : >
            docker exec -i {{ api_host }} krake_bootstrap_db --force -
            {% if etcd_host is defined %}--db-host {{ etcd_host }} {% endif %}
            {% if etcd_port is defined %}--db-port {{ etcd_port }} {% endif %}
            < {{ git_dir }}/{{ item }}
          loop:
            - "templates/bootstrapping/base_roles.yaml"

    - name: krakectl deployment
      tags:
        - krakectl-deployment
      block:

        - name: Create configuration certificates sub-directory
          become_user: root
          file:
            path: "{{ krakectl_configuration_dir }}/certs"
            state: directory
            owner: krake
            group: krake
          when: enable_tls is defined and enable_tls

        # The creation of certificates for krakectl needs the ca used by Krake. Thus the
        # creation of the certificate is done in the Krake deployment.
        - name: Copy the krakectl certificates
          become_user: root
          copy:
            src: "{{ configuration_dir }}/certs/{{ item.src }}"
            dest: "{{ krakectl_configuration_dir }}/certs"
            owner: krake
            group: krake
            mode: "{{ item.mode }}"
            remote_src: yes
          loop:
            - { src: "ca.pem", mode: '0644' }
            - { src: "system:admin.pem", mode: '0644' }
            - { src: "system:admin-key.pem", mode: '0600' }
          when: enable_tls is defined and enable_tls

        - name: Generate certificates for krakectl
          command: >
            {{ git_dir }}/support/pki system:admin
            --dest-dir {{ krakectl_configuration_dir }}/certs
            --host {{ api_host }} --ignore
          when: enable_tls is defined and enable_tls

        - name: Create configuration directory for krakectl
          become_user: root
          file:
            path: "{{ krakectl_configuration_dir }}"
            state: directory
            owner: krake
            group: krake

        - name: Install krakectl
          tags:
            - synchronize
            - pip
          pip:
            name: "{{ git_dir }}/krakectl"
            executable: pip3
            extra_args: --user --editable

        - name: Create krakectl configuration file
          script: >
            {{ repo_dir }}/krake/scripts/krake_generate_config
            --dst {{ krakectl_configuration_dir }}
            {% if enable_tls is defined and enable_tls %} --tls-enabled {% endif %}
            {% if enable_tls is defined and enable_tls %}
            --cert-dir {{ krakectl_configuration_dir }}/certs {% endif %}
            --api-host localhost
            {% if api_port is defined %} --api-port {{ api_port }} {% endif %}
            {{ git_dir }}/templates/config/krakectl.yaml.template

    - name: Local krakectl deployment
      tags:
        - local-krakectl-access
      vars:
        local_krakectl_conf: "krakectl_configurations/{{ inventory_hostname }}"
        local_krakectl_certs: "{{ local_krakectl_conf }}/certs"
      block:

        - name: Create krakectl configuration directory
          delegate_to: localhost
          become: no
          file:
            path: "{{ item }}"
            state: directory
          loop:
            - "{{ local_krakectl_conf }}"
            - "{{ local_krakectl_certs }}"

        - name: Download krakectl certificates
          fetch:
            src: "{{ krakectl_configuration_dir }}/certs/{{ item }}"
            dest: "{{ local_krakectl_certs }}/"
            flat: yes
          with_items:
            - "ca.pem"
            - "system:admin.pem"
            - "system:admin-key.pem"
          when: enable_tls is defined and enable_tls

        - name: Create Krake krakectl configuration file
          delegate_to: localhost
          become: no
          script: >
            ../krake/scripts/krake_generate_config
            --dst {{ local_krakectl_conf }}
            {% if enable_tls is defined and enable_tls %} --tls-enabled {% endif %}
            {% if enable_tls is defined and enable_tls %}
            --cert-dir certs {% endif %}
            --api-host {{ private_ip }}
            {% if api_port is defined %} --api-port {{ api_port }} {% endif %}
            ../templates/config/krakectl.yaml.template


- name: Generate cluster config
  become: yes
  become_user: krake
  hosts: krake_apps
  module_defaults:
    ansible.builtin.setup:
      gather_timeout: 60
  vars:
    - krake_homedir: /home/krake
    - cert_dir: "{{ krake_homedir }}/clusters/certs/"
  tags:
    - cluster_certs
  tasks:

    - name: Generate minikube cluster config
      block:

      - name: Create directory to host clusters infos
        file:
          path: "{{ krake_homedir }}/clusters/config"
          state: directory

      - name: Upload certificates directory
        copy:
          src: cluster_certs/
          dest: "{{ cert_dir }}"
          mode: preserve

      - name: Generate kube config file
        template:
          src: files/krake/kube_config.j2
          dest: "{{ krake_homedir }}/clusters/config/{{ item }}"
        vars:
          cluster_name: "{{ item }}"
          cluster_ip: "{{ hostvars[item]['private_ip'] }}"
          cluster_api_port: "{{ hostvars[item]['api_port'] }}"
        with_items: "{{ groups['minikube_clusters'] }}"

      when: groups['minikube_clusters'] is defined


    - name: Generate k3s cluster config
      block:

      - name: Create directory to host clusters infos
        file:
          path: "{{ krake_homedir }}/clusters/config"
          state: directory

      - name: Upload certificates directory
        copy:
          src: cluster_certs/
          dest: "{{ cert_dir }}"
          mode: preserve

      - name: Generate kube config file
        template:
          src: files/krake/kube_k3s_config.j2
          dest: "{{ krake_homedir }}/clusters/config/{{ item }}"
        vars:
          cluster_name: "{{ item }}"
          cluster_ip: "{{ hostvars[item]['private_ip'] }}"
          cluster_api_port: "{{ hostvars[item]['api_port'] }}"
        with_items: "{{ groups['k3s_clusters'] }}"

      when: groups['k3s_clusters'] is defined


    - name: Generate microk8s cluster config
      block:

      - name: Create directory to host clusters infos
        file:
          path: "{{ krake_homedir }}/clusters/config"
          state: directory

      - name: Upload certificates directory
        copy:
          src: cluster_certs/
          dest: "{{ cert_dir }}"
          mode: preserve

      - name: Generate kube config file
        template:
          src: "cluster_certs/{{ item }}/mk8s_config.j2"
          dest: "{{ krake_homedir }}/clusters/config/{{ item }}"
        with_items: "{{ groups['microk8s_clusters'] }}"

      when: groups['microk8s_clusters'] is defined
