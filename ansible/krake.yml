- name: Launch Krake VMs
  hosts: krake_apps
  gather_facts: false
  tasks:

    # Check if Krake app and Central IdP are in the same network
    - debug:
        msg: >
          Krake app is in a different network ({{ network }}) than the
          IdP ({{ hostvars[idp].network }})
      when: "hostvars[idp].network != network"

    - name: Create Heat stack for Krake VM
      delegate_to: localhost
      os_stack:
        name: "{{ inventory_hostname }}"
        state: present
        template: "{{ playbook_dir }}/files/krake/stack.yml"
        parameters:
          key: "{{ keypair }}"
          instance_name: "{{ inventory_hostname }}"
          create_floating_ip: "{{ floating_ip }}"
          network: "{{ hostvars[network].inventory_hostname }}"
          subnet: "{{ hostvars[network].subnet_name }}"
          public_network: "{{ hostvars[network].public_network }}"
          common_secgroup: "{{ hostvars[network].common_secgroup_name }}"
          flavor: "{{ flavor }}"
      register: stack

    - name: Update host variables of Central IdP
      vars:
        outputs: "{{ stack | stack_outputs }}"
        jump_host: "{{ hostvars[gateway].ansible_user }}@{{ hostvars[gateway].ansible_host }}"
        jump_key_file: "{{ hostvars[gateway].ansible_ssh_private_key_file or '~/.ssh/id_rsa' }}"
      update_host:
        hostname: "{{ inventory_hostname }}"
        ansible_host: "{{ outputs.private_ip }}"
        ansible_user: ubuntu
        ansible_ssh_common_args: '
          -o StrictHostKeyChecking=No
          -o UserKnownHostsFile=/dev/null
          -o ProxyCommand="ssh
              -o StrictHostKeyChecking=No
              -o UserKnownHostsFile=/dev/null
              {% if jump_key_file %} -i {{ jump_key_file }} {% endif %}
              -W %h:%p -q {{ jump_host }}"'
        ansible_ssh_private_key_file: "{{ key_file }}"
        ansible_python_interpreter: python3
        private_ip: "{{ outputs.private_ip }}"
        public_ip: "{{ outputs.public_ip | default(None) }}"

- name: Setup Krake VMs
  become: yes
  # Run gather_facts (setup) manually to avoid a timing problem if the VM is
  # not booted yet
  gather_facts: no
  hosts: krake_apps
  tasks:

    - name: Wait for Krake VM to show up
      wait_for_connection:
        timeout: 300

    - name: Gathering facts
      setup:

    # Replace default mirror with a faster one
    - name: Copy sources.list
      copy:
        src: "{{ playbook_dir }}/files/krake/sources.list"
        dest: /etc/apt/sources.list

    - name: Install system packages
      apt:
        update_cache: yes
        state: present
        name: "{{ packages }}"
      vars:
        packages:
          - jq
          - python3-pip
          - joe
          - haveged
          - prometheus-node-exporter

          # Docker dependencies
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg

    - name: Add Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} stable

    - name: Install Docker CE
      apt:
        name: docker-ce

    - name: Install Docker-Compose
      pip:
        name: docker-compose

    - name: Install kubectl
      command: snap install kubectl --classic

    - name: Install python packages
      tags:
        - python-deps
      pip:
        name: "{{ packages }}"
      vars:
        packages:
          - attrs~=18.2.0
          - flake8
          - flask~=1.0.2
          - jsonschema~=2.6.0
          - keystoneauth1~=3.11.0
          - kubernetes~=10.0.0a1
          - mock
          - mysql-connector-python~=8.0.15
          - pika~=0.12.0
          - pyOpenSSL~=18.0.0
          - pytest
          - pytest-cov
          - python-magnumclient~=2.10.0
          - urllib3~=1.24.3
          - responses~=0.10.4
          - requests~=2.20.1
          - retrying~=1.3.3
          - texttable~=1.5.0
          - docker
          - sqlalchemy

    # Inspired from https://stackoverflow.com/questions/37333305/ansible-create-a-user-with-sudo-privileges
    - name: Create 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow members of 'wheel' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Create user 'krake'
      user:
        name: krake
        append: yes
        groups:
          - docker
          - wheel # used for sudo
        create_home: yes
        state: present
        shell: /bin/bash
        home: /home/krake

    - name: Create a hushlogin for user krake
      become_user: krake
      copy:
        content: ""
        dest: /home/krake/.hushlogin
        force: no

    # TODO: Remove once issue is resolved
    #   C&H infra currently suffers from "MTU bug" when typical value of 1500 causes connectivity
    #   issues. Following is a workaround.
    - name: Create workaround in Docker for C&H's MTU issues
      copy:
        dest: "/etc/docker.json"
        content: '{ "mtu" : 1450 }'

    - name: Restart docker to reload the configuration
      systemd:
        name: docker
        state: restarted

    - name: Add hostname to /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "127.0.0.1 {{ hostname }}"

    - name: Set the machine's hostname
      copy:
        dest: "/etc/hostname"
        content: "{{ hostname }}"

    - name: Create .ssh directory
      file:
        path: /home/krake/.ssh
        state: directory
        mode: 0770
        owner: krake
        group: krake

    - name: Copy 'authorized_keys' from user 'ubuntu' to user 'krake'
      copy:
        remote_src: yes
        src: /home/ubuntu/.ssh/authorized_keys
        dest: /home/krake/.ssh/authorized_keys
        owner: krake
        mode: 0600

    - name: Register Krake VM on Prometheus
      tags:
        - prometheus
      uri:
        url: https://{{ hostvars[prometheus].ansible_host }}/edit_target/krake_vm
        validate_certs: no
        user: admin
        password: "{{ hostvars[prometheus].prometheus_admin_pass }}"
        method: POST
        body:
          target: "{{ ansible_host }}"
          node: "Krake"
          node_name: "{{ inventory_hostname }}"
        force_basic_auth: yes
        status_code: 200
        body_format: json

- name: Manage Krake VM
  become: yes
  become_user: krake
  hosts: krake_apps
  tags:
    - manage
  roles:
    - authorized-keys
  vars:
    git_dir: /home/krake/git/krake
    repo_dir: "{{ playbook_dir }}/.."
    authorized_user: krake

    # FIXME: The following variables are copied from
    #   "infra/krake_app/cloud_init/krake_vm-template_settings.py". There should
    #   be only one place for this configuration.
    uwsgi_processes: 1

    idp_host: "{{ hostvars[idp].private_ip }}:{{ hostvars[idp].keystone_port }}"
    idp_auth_provider_url: "https://{{ hostvars[idp].private_ip }}:{{ hostvars[idp].keystone_port }}/v3"
    idp_auth_url: "https://{{ hostvars[idp].private_ip }}:{{ hostvars[idp].keystone_port }}/identity/v3"
    idp_user: admin
    idp_pass: tmp

    krake_url: "https://{{ ansible_host }}/applications"
    monitor_target_url: "https://{{ hostvars[prometheus].ansible_host }}/edit_target/app"
    monitor_target_pass: "{{ hostvars[prometheus].prometheus_admin_pass }}"

  tasks:

    - name: Create git sub-directory
      become_user: root
      file:
        path: "{{ git_dir }}"
        state: directory
        owner: krake
        group: krake

    - name: Synchronize local and remote repository
      tags:
        - synchronize
        - code
      vars:
        src: "{{ repo_dir }}"
        exclude_file: "{{ playbook_dir }}/files/krake/rsync.exclude"
        dest: "{{ git_dir }}"
      block:

        # rsync is executed on the localhost
        - name: Copy files with rsync
          synchronize:
            dirs: true
            checksum: true
            perms: true
            rsync_opts:
              - --itemize-changes
              - "--exclude-from={{ exclude_file }}"
            src: "{{ src }}"
            dest: "{{ dest }}"
            delete: yes
            use_ssh_args: true

        # rsync does not honour become_user
        - name: Set correct permissions
          become_user: root
          file:
            recurse: true
            path: "{{ dest }}"
            state: directory
            owner: krake
            group: krake

    - name: Add PYTHONPATH and aliases to .bashrc
      blockinfile:
        path: /home/krake/.bashrc
        block: |
          # Appended by Ansible
          source "{{ git_dir }}/krake_cli/sample_openrc.sh"
          export PYTHONPATH="{{ git_dir }}"
          alias rok="python3 -m krake_cli"
          alias recreate_env="{{ git_dir }}/dev_utils/recreate_env.sh"

    # FIXME: These templates have to be kept in sync with the corresponding
    #   configuration files in the krake_* modules. In the future, there
    #   should be only one place for configuration handling.
    - name: Instantiate Central-IdP configuration templates
      block:
        - name: Set Central-IdP parameters in krake_common/config.py
          template:
            dest: "{{ git_dir }}/krake_common/config.py"
            src: "{{ playbook_dir }}/files/krake/config_krake_common.py.j2"

        - name: Set Central-IdP parameters in krake_api/config_dev.py
          template:
            dest: "{{ git_dir }}/krake_api/config_dev.py"
            src: "{{ playbook_dir }}/files/krake/config_krake_api.py.j2"

    - name: Copy sample_openrc.sh
      copy:
        src: "{{ repo_dir }}/krake_cli/sample_openrc.sh"
        dest: "{{ git_dir }}/krake_cli/sample_openrc.sh"
        owner: krake
        group: krake

    - name: Instantiate sample_openrc.sh template
      template:
        src: "{{ playbook_dir }}/files/krake/krake_sample_openrc.sh.j2"
        dest: "{{ git_dir }}/krake_cli/sample_openrc.sh"
      vars:
        os_auth_url: "https://{{ idp_host }}/v3"

    - name: Generate nginx configuration
      template:
        src: "{{ repo_dir }}/infra/krake_app/docker-compose/krake_nginx/nginx.conf.j2"
        dest: "{{ git_dir }}/infra/krake_app/docker-compose/krake_nginx/nginx.conf"
        owner: krake
        group: krake

    - name: Generate uwsgi configuration
      template:
        src: "{{ repo_dir }}/infra/krake_app/docker-compose/krake_api_ctrl/uwsgi.ini.j2"
        dest: "{{ git_dir }}/infra/krake_app/docker-compose/krake_api_ctrl/uwsgi.ini"
        owner: krake
        group: krake

    - name: Generate Krake Scheduler configuration
      krake_scheduler_config:
        devstacks: "{{ devstacks }}"
        magnum_clusters: "{{ magnum_clusters }}"
      register: scheduler_config
      tags:
        - krake-scheduler-config

    - name: Copy scheduler configuration
      copy:
        content: "{{ scheduler_config['config'] }}"
        dest: "{{ git_dir }}/krake_scheduler/config.py"
        mode: 0644
        owner: krake
        group: krake
      tags:
        - krake-scheduler-config

    - name: Start Krake containers
      tags:
        - docker
        - synchronize

      # FIXME: The "docker_service" Ansible module crashes when the Krake
      #   Docker images are built for the first time. We think this might be a
      #   timeout issue or too much stdout output for the Ansible module to
      #   handle.
      #
      #   The current workaround is running docker-compose via the "command"
      #   Ansible plugin.
      #
      # docker_service:
      #   restarted: true
      #   build: yes
      #   project_src: "{{ git_dir }}/infra/krake_app/docker-compose/"
      block:

        - name: Stop Docker service
          docker_service:
            state: absent
            project_src: "{{ git_dir }}/infra/krake_app/docker-compose/"

        - name: Build Docker images
          command: docker-compose -f {{ git_dir }}/infra/krake_app/docker-compose/docker-compose.yml build

        - name: Start Docker service
          docker_service:
            state: present
            project_src: "{{ git_dir }}/infra/krake_app/docker-compose/"
          environment:
            MYSQL_DEFAULT_PASS: "{{ db_password }}"
