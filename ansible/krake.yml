- name: Setup Krake VMs
  become: yes
  # Run gather_facts (setup) manually to avoid a timing problem if the VM is
  # not booted yet
  gather_facts: no
  hosts: krake
  tasks:

    - name: Wait for Krake VM to show up
      wait_for_connection:
        timeout: 300

    - name: Gathering facts
      setup:

    # Replace default mirror with a faster one
    - name: Copy sources.list
      copy:
        src: "{{ playbook_dir }}/files/krake/sources.list"
        dest: /etc/apt/sources.list

    - name: Install system packages
      apt:
        update_cache: yes
        state: present
        name: "{{ packages }}"
      vars:
        packages:
          - jq
          - python3-pip
          - haveged

          # Docker dependencies
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg

    - name: Add Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} stable

    - name: Install Docker CE
      apt:
        name: docker-ce

    - name: Install Docker-Compose
      pip:
        name: docker-compose

    # Inspired from https://stackoverflow.com/questions/37333305/ansible-create-a-user-with-sudo-privileges
    - name: Create 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow members of 'wheel' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Create user 'krake'
      user:
        name: krake
        append: yes
        groups:
          - docker
          - wheel # used for sudo
        create_home: yes
        state: present
        shell: /bin/bash
        home: /home/krake

    - name: Create a hushlogin for user krake
      become_user: krake
      copy:
        content: ""
        dest: /home/krake/.hushlogin
        force: no

    - name: Configure Docker daemon MTU
      template:
        src: files/krake/daemon.json.j2
        dest: /etc/docker/daemon.json

    - name: Restart docker to reload the configuration
      systemd:
        name: docker
        state: restarted

    - name: Add hostname to /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "127.0.0.1 {{ hostname }}"

    - name: Set the machine's hostname
      copy:
        dest: "/etc/hostname"
        content: "{{ hostname }}"

    - name: Create .ssh directory
      file:
        path: /home/krake/.ssh
        state: directory
        mode: 0770
        owner: krake
        group: krake

    - name: Copy 'authorized_keys' from user 'ubuntu' to user 'krake'
      copy:
        remote_src: yes
        src: /home/ubuntu/.ssh/authorized_keys
        dest: /home/krake/.ssh/authorized_keys
        owner: krake
        mode: 0600

- name: Manage Krake VM
  become: yes
  become_user: krake
  hosts: krake
  tags:
    - manage
  roles:
    - authorized-keys
  vars:
    git_dir: /home/krake/git/krake
    repo_dir: "{{ playbook_dir }}/.."
    authorized_user: krake

  tasks:

    - name: Create git sub-directory
      become_user: root
      file:
        path: "{{ git_dir }}"
        state: directory
        owner: krake
        group: krake

    - name: Synchronize local and remote repository
      tags:
        - synchronize
        - code
      block:
        # rsync is executed on the localhost
        - name: Copy files with rsync
          synchronize:
            dirs: true
            checksum: true
            perms: true
            rsync_opts:
              - --itemize-changes
              - "--exclude=.git/"
              - "--exclude=.gitlab/"
              - "--exclude=.idea"
              - "--exclude-from={{ repo_dir }}/.gitignore"
            src: "{{ repo_dir }}"
            dest: "{{ git_dir }}"
            delete: yes
            use_ssh_args: true

        # rsync does not honour become_user
        - name: Set correct permissions
          become_user: root
          file:
            recurse: true
            path: "{{ git_dir }}"
            state: directory
            owner: krake
            group: krake

    - name: Krake infrastructure deployment
      tags:
        - krake-deployment
      block:

        # The docker-compose.override only contains the network definition and
        # will automatically be merged with docker-compose.yml when
        # "docker-compose up" is run.
        - name: Configure krake_default bridge MTU
          template:
            src: files/krake/docker-compose.override.yml.j2
            dest: "{{ git_dir }}/docker/krake/docker-compose.override.yml"

        - name: Generate dot env configuration file
          template:
            src: "{{ repo_dir }}/docker/krake/.env.j2"
            dest: "{{ git_dir }}/docker/krake/.env"
            owner: krake
            group: krake

        - name: Remove Krake infrastructure
          docker_service:
            project_src: "{{ git_dir }}/docker/krake"
            state: absent

        - name: Remove Krake image
          docker_image:
            name: krake:latest
            state: absent

        - name: Build Krake image
          docker_image:
            name: krake:latest
            dockerfile: "{{ git_dir }}/docker/krake/Dockerfile"
            path: "{{ git_dir }}"
            nocache: yes

        - name: Start Krake infrastructure
          docker_service:
            project_src: "{{ git_dir }}/docker/krake"
            state: present
            build: no

    - name: Krake rok deployment
      tags:
        - krake-rok-deployment
      vars:
        api_host: localhost
      environment:
        XDG_CONFIG_HOME: "{{ git_dir }}"
      block:

        # This is a temporary fix, will be override by !261
        - name: Create Krake rok configuration file
          vars:
            file_content:
              "api_url": "http://{{ api_host }}:{{ krake_api_port }}"
              "user": "system"
          copy:
            dest: "{{ git_dir }}/rok.yaml"
            content: |
              {{ file_content | to_json }}

        - name: Install Krake rok
          tags:
            - synchronize
            - pip
          pip:
            name: "{{ git_dir }}/rok"


- name: Generate cluster config
  become: yes
  become_user: krake
  hosts: krake
  vars:
    - krake_homedir: /home/krake
  tags:
    - cluster_certs
  tasks:
    - block:

      - name: Create directory to host clusters infos
        file:
          path: "{{ krake_homedir }}/clusters/config"
          state: directory

      - name: Upload certificates directory
        copy:
          src: cluster_certs/
          dest: "{{ krake_homedir }}/clusters/certs/"
          mode: preserve

      - name: Generate kube config file
        template:
          src: files/krake/kube_config.j2
          dest: "{{ krake_homedir }}/clusters/config/{{ item }}"
        vars:
          cluster_name: "{{ item }}"
          cluster_ip: "{{ hostvars[item]['private_ip'] }}"
          cluster_api_port: "{{ hostvars[item]['minikube_api_port'] }}"
        with_items: "{{ groups['minikube'] }}"

      when: groups['minikube'] is defined
