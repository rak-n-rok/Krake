tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/grycap/ec3/tosca/tosca/custom_types.yaml

description: TOSCA template for launching a Kubernetes Cluster.
topology_template:
  inputs:
    # Kubernetes related inputs
    kube_version:
      type: string
      description: Version of Kubernetes to install
      default: "1.22.9"
      constraints:
      - valid_values: [ "1.23.6", "1.22.9", "1.21.12" ]
    cri_runtime:
      type: string
      description: CRI Runtime to use with Kubernetes
      default: "docker"
      constraints:
      - valid_values: [ docker, containerd ]
    kube_nvidia_support:
      type: boolean
      description: Flag to add NVIDIA support
      default: false
      constraints:
       - valid_values: [ false, true ]
    kube_cert_manager:
      type: boolean
      description: Flag to install Cert-Manager
      default: false
      constraints:
      - valid_values: [ false, true ]
    kube_cert_user_email:
      type: string
      description: Email to be used in the Let's Encrypt issuer
      default: "jhondoe@server.com"
    admin_username:
      type: string
      description: Username of the admin user
      default: kubeuser
    admin_token:
      type: string
      description: Access Token for the admin user
      default: not_very_secret_token
    # Compute related inputs
    wn_num:
      type: integer
      description: Number of WNs in the cluster
      default: 1
      required: yes
    fe_cpus:
      type: integer
      description: Number of CPUs for the front-end node
      default: 2
      required: yes
      constraints:
      - valid_values: [ 2, 4, 8, 16, 32, 64 ]
    fe_mem:
      type: scalar-unit.size
      description: Amount of Memory for the front-end node
      default: 4 GB
      required: yes
      constraints:
      - valid_values: [ 4 GB, 8 GB, 16 GB, 32 GB, 64 GB, 128 GB, 256 GB, 512 GB ]
    fe_instance_type:
      type: string
      description: Flavor name of the front-end node (takes precedence over cpu/mem settings)
      default: ""
    wn_cpus:
      type: integer
      description: Number of CPUs for the WNs
      default: 2
      required: yes
      constraints:
      - valid_values: [ 2, 4, 8, 16, 32, 64 ]
    wn_mem:
      type: scalar-unit.size
      description: Amount of Memory for the WNs
      default: 4 GB
      required: yes
      constraints:
      - valid_values: [ 4 GB, 8 GB, 16 GB, 32 GB, 64 GB, 128 GB, 256 GB, 512 GB ]
    wn_instance_type:
      type: string
      description: Flavor name for the WNs (takes precedence over cpu/mem settings)
      default: ""
    allowed_cidr:
      type: string
      description: Allowed remote CIDR to external access
      default: "0.0.0.0/0"

  node_templates:
    network_public:
      type: tosca.nodes.network.Network
      properties:
        network_type: public

    network_private:
      type: tosca.nodes.indigo.network.Network
      properties:
        ip_version: 4
        cidr: 172.30.100.0/24
        network_type: private

    front_port_private:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: front
        - link: network_private

    front_port_public:
      type: tosca.nodes.network.Port
      properties:
        order: 1
      requirements:
        - binding: front
        - link: network_public

    wn_port_private:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: wn
        - link: network_private

    wn_port_public:
      type: tosca.nodes.network.Port
      properties:
        order: 1
      requirements:
        - binding: wn
        - link: network_public

    lrms_front_end:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Kubernetes
      capabilities:
        endpoint:
          properties:
            ports:
              ssh_port:
                protocol: tcp
                source: 22
                remote_cidr: { get_input: allowed_cidr }
              http_port:
                protocol: tcp
                source: 80
                remote_cidr: { get_input: allowed_cidr }
              https_port:
                protocol: tcp
                source: 443
                remote_cidr: { get_input: allowed_cidr }
              k8s_api:
                protocol: tcp
                source: 6443
                remote_cidr: { get_input: allowed_cidr }
      properties:
        admin_username:  { get_input: admin_username }
        admin_token: { get_input: admin_token }
        version: { get_input: kube_version }
        nvidia_support: { get_input: kube_nvidia_support }
        cert_manager: { get_input: kube_cert_manager }
        cert_user_email: { get_input: kube_cert_user_email }
        cri_runtime: { get_input: cri_runtime }
        install_kubeapps: false
      requirements:
        - host: front

    front:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            dns_name: kubeserver
            network_name: PUBLIC
        host:
          properties:
            num_cpus: { get_input: fe_cpus }
            mem_size: { get_input: fe_mem }
            instance_type: { get_input: fe_instance_type }
        os:
          properties:
            distribution: ubuntu
            version: 22.04
            type: linux

    wn_node:
      type: tosca.nodes.indigo.LRMS.WorkerNode.Kubernetes
      properties:
        front_end_ip: { get_attribute: [ front, private_address, 0 ] }
        version: { get_input: kube_version }
        nvidia_support: { get_input: kube_nvidia_support }
        cri_runtime: { get_input: cri_runtime }
      requirements:
        - host: wn

    wn:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count: { get_input: wn_num }
            removal_list: ['2']
        host:
          properties:
            num_cpus: { get_input: wn_cpus }
            mem_size: { get_input: wn_mem }
            instance_type: { get_input: wn_instance_type }
        os:
          properties:
            distribution: ubuntu
            version: 20.04
            type: linux

  outputs:
    dashboard_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], '/dashboard/' ] }
    api_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], ':6443' ] }
    kubeconfig:
      value: { get_attribute: [ front, ansible_output, lrms_front_end_front_conf_front, tasks, kube_conf, output ] }
