---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sd-deployment
spec:
  selector:
    matchLabels:
      app: shutdown
  template:
    metadata:
      labels:
        app: shutdown
    spec:
      volumes:
      - name: sd-volume
        configMap:
          name: sd-service-configmap
      containers:
      - name: shutdown
        image: nyurik/alpine-python3-requests
        ports:
          - containerPort: 10000
        volumeMounts:
          - mountPath: /opt
            name: sd-volume
        env:
          - name: HOME
            value: /tmp
        command:
        - /bin/sh
        - -c
        - |
          echo "copy scripts to /tmp (configMap is read-only)"
          cp /opt/hook-shutdown-script.py /tmp
          echo "apply 'chmod +x' to /tmp/hook-shutdown-script.py"
          chmod +x /tmp/hook-shutdown-script.py
          /tmp/hook-shutdown-script.py
---
apiVersion: v1
kind: Service
metadata:
  name: shutdown
spec:
  type: NodePort
  selector:
    app: shutdown
  ports:
  - port: 10000
    protocol: TCP
    targetPort: 10000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sd-service-configmap
data:
  hook-shutdown-script.py: |
    #!/usr/bin/env python3
    """This script is used by the "shutdown" hook test, to act as a dummy job being started
    in a Deployment that belongs to a Krake Application.
    """
    import os.path
    import time

    import requests
    import socketserver
    from http.server import BaseHTTPRequestHandler

    endpoint_env = "KRAKE_SHUTDOWN_URL"
    token_env = "KRAKE_SHUTDOWN_TOKEN"
    default_ca_bundle = "/etc/krake_shutdown_cert/ca-bundle.pem"
    default_cert_path = "/etc/krake_shutdown_cert/cert.pem"
    default_key_path = "/etc/krake_shutdown_cert/key.pem"


    def shutdown_pod():

        cert_and_key = None
        ca = False
        # Only set if TLS is enabled. Otherwise, the files do not exist.
        if os.path.isfile(default_cert_path) and os.path.isfile(default_key_path):
            cert_and_key = (default_cert_path, default_key_path)
            ca = default_ca_bundle

            print(default_ca_bundle)
            print(default_cert_path)
            print(default_key_path)

        endpoint = os.getenv(endpoint_env)
        token = os.getenv(token_env)

        print(endpoint)
        print(token)

        time.sleep(10)

        response = requests.put(
            endpoint, verify=ca, json={"token": token}, cert=cert_and_key
        )
        print(response)
        print(response.reason)
        print(response.content)
        print(response.headers)
        print(response.raw)


    class ShutdownRequestHandler(BaseHTTPRequestHandler):
        def do_PUT(self):
            if self.path == '/shutdown':
                self.send_response(200)
                self.send_header("Content-Type", "text/html")
                self.send_header("Content-Length",
                                 str(len(b'Graceful shutdown requested!')))
                self.end_headers()
                self.wfile.write(b'Graceful shutdown requested!')
                shutdown_pod()


    def main():
        httpd = socketserver.TCPServer(("", 10000), ShutdownRequestHandler)
        httpd.serve_forever()


    if __name__ == "__main__":
        main()
