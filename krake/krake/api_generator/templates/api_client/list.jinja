async def list_{{ operation.signature_name }}(self{{ namespace_signature(operation) }}):
    """List the {{ operation.resource.plural }} in the namespace.
    {{ docstring(operation)|indent }}
    """
    path = "{{ operation.path }}".format({{ namespace_format(operation) }})
    url = self.client.url.with_path(path)

    resp = await self.client.session.request("{{ operation.method }}", url)
    data = await resp.json()
    return {{ operation.response.__name__ }}.deserialize(data)

def watch_{{ operation.resource.snake_case_plural }}(self{{ namespace_signature(operation) }}, heartbeat=None):
    """Generate a watcher for the {{ operation.resource.plural }} in the namespace.
    {{ docstring(operation)|indent }}
    """
    path = "{{ operation.path }}".format({{ namespace_format(operation) }})

    query = {"watch": ""}
    if heartbeat is not None:
        query["heartbeat"] = heartbeat

    url = self.client.url.with_path(path).with_query(query)

    return Watcher(self.client.session, url, {{ operation.resource.singular }})
