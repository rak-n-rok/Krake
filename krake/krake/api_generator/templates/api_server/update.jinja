@routes.route(
    "{{ operation.method }}", "{{ operation.path }}",
)
@protected(
    api="{{ operation.resource.api }}", resource="{{ operation.resource.plural|lower }}", verb="update",
)
@use_schema(
    "body", schema={{ operation.body.__name__ }}.Schema
)
@load("entity", {{ operation.response.__name__ }})
async def update_{{ operation.signature_name }}(request, body, entity):
    # Once a resource is in the "deletion in progress" state, finalizers
    # can only be removed.
    if entity.metadata.deleted:
        if not set(body.metadata.finalizers) <= set(entity.metadata.finalizers):
            raise web.HTTPConflict(
                text=json.dumps(
                    {
                        "metadata": {
                            "finalizers": [
                                "Finalizers can only be removed if "
                                "deletion is in progress."
                            ]
                        }
                    }
                ),
                content_type="application/json",
            )

    # FIXME: if a user updates an immutable field, (such as the created timestamp),
    #  the request is accepted and the API returns 200. The `modified` timestamp
    #  will also still be updated, even though no change from the request on
    #  immutable fields will be applied.
    #  Changes to immutable fields should be rejected, see Krake issue #410
    if body == entity:
        raise json_error(web.HTTPBadRequest, "The body contained no update.")

    entity.update(body)
    entity.metadata.modified = utils.now()

    # Resource is in "deletion in progress" state and all finalizers have
    # been removed. Delete the resource from database.
    if entity.metadata.deleted and not entity.metadata.finalizers:
        await session(request).delete(entity)
        logger.info(
            "Delete %s %r (%s)",
            "{{ operation.resource.singular }}",
            entity.metadata.name,
            entity.metadata.uid,
        )
    else:
        await session(request).put(entity)
        logger.info(
            "Update %s %r (%s)",
            "{{ operation.resource.singular }}",
            entity.metadata.name,
            entity.metadata.uid,
        )

    return web.json_response(entity.serialize())
