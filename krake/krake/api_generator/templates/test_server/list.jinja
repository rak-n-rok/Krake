async def test_list_{{ operation.signature_name }}(aiohttp_client, config, db):
    resources = [
        {{ operation.resource.singular }}Factory(),
        {{ operation.resource.singular }}Factory(),
        {{ operation.resource.singular }}Factory(),
        {{ operation.resource.singular }}Factory(),
        {{ operation.resource.singular }}Factory(),
        {{ operation.resource.singular }}Factory({{ namespace_metadata_namespace(operation) }})
    ]
    for elt in resources:
        await db.put(elt)

    client = await aiohttp_client(create_app(config=config))
    resp = await client.get("{{ operation.path.format(namespace="testing", name="{name}") }}")
    assert resp.status == 200

    body = await resp.json()
    received = {{ operation.response.__name__ }}.deserialize(body)

    key = attrgetter("metadata.name")
    assert sorted(received.items, key=key) == sorted(resources{{ namespace_sort_all(operation) }}, key=key)


async def test_list_{{ operation.signature_name }}_rbac(rbac_allow, config, aiohttp_client):
    config.authorization = "RBAC"
    client = await aiohttp_client(create_app(config))

    resp = await client.get("{{ operation.path.format(namespace="testing", name="{name}") }}")
    assert resp.status == 403

    async with rbac_allow(
        "{{ operation.resource.api }}",
        "{{ operation.resource.plural|lower }}",
        "list"{{ namespace_none(operation) }}
    ):
        resp = await client.get("{{ operation.path.format(namespace="testing", name="{name}") }}")
        assert resp.status == 200


async def test_watch_{{ operation.signature_name }}(aiohttp_client, config, db, loop):
    client = await aiohttp_client(create_app(config=config))
    # MISSING Resource-specific elements can be set here
    resources = [
        {{ operation.resource.singular }}Factory(),
        {{ operation.resource.singular }}Factory()
        {% if operation.resource.namespaced %}
        , {{ operation.resource.singular }}Factory(metadata__namespace="other")
        {% endif %}
    ]

    async def watch(created):
        resp = await client.get(
            "{{ operation.path.format(namespace="testing", name="{name}") }}?watch&heartbeat=0"
        )
        assert resp.status == 200
        created.set_result(None)

        for i in count():
            line = await resp.content.readline()
            assert line, "Unexpected EOF"

            event = WatchEvent.deserialize(json.loads(line.decode()))
            data = {{ operation.resource.singular }}.deserialize(event.object)

            if i == 0:
                assert event.type == WatchEventType.ADDED
                assert data.metadata.name == resources[0].metadata.name
                # MISSING The resource-specific attributes can be verified here.
                # assert data.spec == resources[0].spec
            elif i == 1:
                assert event.type == WatchEventType.ADDED
                assert data.metadata.name == resources[1].metadata.name
                # MISSING The resource-specific attributes can be verified here.
                # assert data.spec == resources[1].spec
            elif i == 2:
                assert event.type == WatchEventType.MODIFIED
                assert data.metadata.name == resources[0].metadata.name
                # MISSING The resource-specific attributes can be verified here.
                # assert data.spec == resources[0].spec
                return
            elif i == 3:
                assert False

    async def modify(created):
        # Wait for watcher to be established
        await created

        # Create the {{ operation.resource.plural }}
        for data in resources:
            resp = await client.post(
                {{ 'f' if operation.resource.namespaced }}"{{ operation.resource["Create"].path.format(namespace="{data.metadata.namespace}", name="") }}", json=data.serialize()
            )
            assert resp.status == 200

        resp = await client.delete(
            f"{{ operation.resource["Delete"].path.format(namespace="testing", name="{resources[0].metadata.name}") }}"
        )
        assert resp.status == 200

        received = {{ operation.resource.singular }}.deserialize(await resp.json())
        assert resource_ref(received) == resource_ref(resources[0])
        assert received.metadata.deleted is not None

    created = loop.create_future()
    watching = loop.create_task(watch(created))
    modifying = loop.create_task(modify(created))

    await asyncio.wait_for(asyncio.gather(modifying, watching), timeout=3)
