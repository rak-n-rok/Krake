async def test_create_{{ operation.signature_name }}(aiohttp_client, config, db):
    client = await aiohttp_client(create_app(config=config))

    # MISSING Resource-specific elements can be set here
    data = {{ operation.body.__name__ }}Factory()

    resp = await client.post("{{ operation.path.format(namespace="testing", name="{name}") }}", json=data.serialize())
    assert resp.status == 200
    received = {{ operation.response.__name__ }}.deserialize(await resp.json())

    assert received.metadata.created
    assert received.metadata.modified
    assert received.metadata.namespace {{ '== "testing"' if operation.resource.namespaced else "is None" }}
    assert received.metadata.uid
    # MISSING The resource-specific attributes can be verified here.
    # assert received.spec == data.spec

    stored = await db.get({{ operation.response.__name__ }}, {{ namespace_testing(operation) }}name=data.metadata.name)
    assert stored == received


async def test_create_{{ operation.signature_name }}_rbac(rbac_allow, config, aiohttp_client):
    config.authorization = "RBAC"
    client = await aiohttp_client(create_app(config=config))

    resp = await client.post("{{ operation.path.format(namespace="testing", name="{name}") }}")
    assert resp.status == 403

    async with rbac_allow(
        "{{ operation.resource.api }}",
        "{{ operation.resource.plural|lower }}",
        "create"{{ namespace_none(operation) }}
    ):
        resp = await client.post("{{ operation.path.format(namespace="testing", name="{name}") }}")
        assert resp.status == 415


async def test_create_{{ operation.signature_name }}_with_existing_name(aiohttp_client, config, db):
    existing = {{ operation.body.__name__ }}Factory(metadata__name="existing")
    await db.put(existing)

    client = await aiohttp_client(create_app(config=config))

    resp = await client.post("{{ operation.path.format(namespace="testing", name="{name}") }}", json=existing.serialize())
    assert resp.status == 409

    received = await resp.json()
    reason = HttpReason.deserialize(received)
    assert reason.code == HttpReasonCode.RESOURCE_ALREADY_EXISTS
