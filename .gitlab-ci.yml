stages:
  - e2e

variables:
  ETCD_VER: v3.3.13
  PROMETHEUS_VER: 2.12.0
  CFSSL_VER: 1.4.1

  # Change pip's cache directory to be inside the project directory since we
  # can only cache local items.
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"


# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
cache:
  paths:
    - .cache/pip


# Unit tests and flake8 are run on commits on branches which are not yet in a
# merge requests (including master), on merge requests, and on scheduled
# pipeline (night runs). Unfortunately, this configuration create duplicates
# pipelines on merge requests. Unit tests and Flake are run twice.

# It is not possible to workaround this issue. See
# https://gitlab.com/gitlab-org/gitlab-foss/issues/56632. Until workflow rules
# are added to the gitlab CI (See MR
# https://gitlab.com/gitlab-org/gitlab/merge_requests/18130), we have to work
# with duplicated pipelines on merge requests.

.unittests-krake-template: &unittests-krake
  stage: test
  artifacts:
    paths:
      - krake/.coverage.*
  only:
    - tags
    - branches
    - merge_requests
    - schedules
  script:
    # Download etcd
    - mkdir /tmp/etcd-download
    - curl -s -L https://github.com/etcd-io/etcd/releases/download/$ETCD_VER/etcd-$ETCD_VER-linux-amd64.tar.gz -o /tmp/etcd.tar.gz
    - tar xzvf /tmp/etcd.tar.gz -C /tmp/etcd-download --strip-components=1
    - mv /tmp/etcd-download/etcd /usr/local/bin
    - rm -rf /tmp/etcd-download /tmp/etcd.tar.gz
    - etcd --version

    # Download prometheus
    - mkdir /tmp/prometheus-download
    - curl -s -L  https://github.com/prometheus/prometheus/releases/download/v$PROMETHEUS_VER/prometheus-$PROMETHEUS_VER.linux-amd64.tar.gz  -o /tmp/prometheus.tar.gz
    - tar xzvf /tmp/prometheus.tar.gz -C /tmp/prometheus-download --strip-components=1
    - mv /tmp/prometheus-download/prometheus /usr/local/bin
    - rm -rf /tmp/prometheus-download /tmp/prometheus.tar.gz
    - prometheus --version

    # Download cfssl
    - curl -s -L https://github.com/cloudflare/cfssl/releases/download/v${CFSSL_VER}/cfssl_${CFSSL_VER}_linux_amd64 -o /usr/local/bin/cfssl
    - curl -s -L https://github.com/cloudflare/cfssl/releases/download/v${CFSSL_VER}/cfssljson_${CFSSL_VER}_linux_amd64 -o /usr/local/bin/cfssljson
    - chmod +x /usr/local/bin/cfssl /usr/local/bin/cfssljson
    - cfssl version
    - cfssljson --version

    # Download java for Keycloak
    # see https://github.com/docker-library/openjdk/blob/0584b2804ed12dca7c5e264b5fc55fc07a3ac148/8-jre/slim/Dockerfile#L51
    - mkdir -p /usr/share/man/man1
    - apt-get update
    - apt-get install -y --no-install-recommends openjdk-11-jre
    - java --version

    # Download zookeeper, kafka and ksql
    - apt update
    - apt-get install software-properties-common -y
    - wget -qO - https://packages.confluent.io/deb/6.0/archive.key | apt-key add -
    - add-apt-repository "deb [arch=amd64] https://packages.confluent.io/deb/6.0 stable main"
    - apt update
    - apt install zookeeper confluent-kafka confluent-ksqldb -y
    - which zookeeper-server-start
    - which kafka-server-start
    - which ksql-server-start

    - pip install tox
    - tox -- --cov krake/krake --no-cov-on-fail --cov-report= --runslow krake/tests
  tags:
    - docker


# Following job is for end to end testing. We provisioning the staging
# infrastructure, run the smoke tests and the end to end tests, and cleanup
# the staging infrastructure. They are run only on the master branch, on merge
# requests, and on scheduled pipeline (night runs)

e2e-tests:
  stage: e2e
  image: python:3.6
  artifacts:
    paths:
      - ansible/E2E_logs/krake_logs.tar.gz
  only:
    - master
    - merge_requests
    - schedules
  variables:
    ANSIBLE_CONFIG: ansible/ansible.cfg
    ANSIBLE_INVENTORY: ansible/hosts-CI
  script:
    # Pre-requisites: openstack, ansible and pytest
    - pip install python-openstackclient openstacksdk "ansible>=2.9" pytest
    - apt-get update -y && apt-get install openssh-client rsync -y

    # Create SSH keys for to use during the whole pipeline
    - mkdir .ssh/
    - openstack keypair delete my_runner_key_$CI_PIPELINE_ID || true
    - openstack keypair create my_runner_key_$CI_PIPELINE_ID > .ssh/id_rsa
    - chmod 600 .ssh/id_rsa

    # Configure host-CI template with the CI Pipeline ID
    - sed -i "s/\$CI_PIPELINE_ID/$CI_PIPELINE_ID/g" ansible/hosts-CI
    - sed -i "s/\$CI_COMMIT_SHA/$CI_COMMIT_SHA/g" ansible/hosts-CI
    - echo "CHAT_CHANNEL $CHAT_CHANNEL"
    - echo "CHAT_INPUT $CHAT_INPUT"
    - echo "CI $CI"
    - echo "CI_API_V4_URL $CI_API_V4_URL"
    - echo "CI_BUILDS_DIR $CI_BUILDS_DIR"
    - echo "CI_COMMIT_BEFORE_SHA $CI_COMMIT_BEFORE_SHA"
    - echo "CI_COMMIT_DESCRIPTION $CI_COMMIT_DESCRIPTION"
    - echo "CI_COMMIT_MESSAGE $CI_COMMIT_MESSAGE"
    - echo "CI_COMMIT_REF_NAME $CI_COMMIT_REF_NAME"
    - echo "CI_COMMIT_REF_PROTECTED $CI_COMMIT_REF_PROTECTED"
    - echo "CI_COMMIT_REF_SLUG $CI_COMMIT_REF_SLUG"
    - echo "CI_COMMIT_SHA $CI_COMMIT_SHA"
    - echo "CI_COMMIT_SHORT_SHA $CI_COMMIT_SHORT_SHA"
    - echo "CI_COMMIT_BRANCH $CI_COMMIT_BRANCH"
    - echo "CI_COMMIT_TAG $CI_COMMIT_TAG"
    - echo "CI_COMMIT_TITLE $CI_COMMIT_TITLE"
    - echo "CI_COMMIT_TIMESTAMP $CI_COMMIT_TIMESTAMP"
    - echo "CI_CONCURRENT_ID $CI_CONCURRENT_ID"
    - echo "CI_CONCURRENT_PROJECT_ID $CI_CONCURRENT_PROJECT_ID"
    - echo "CI_CONFIG_PATH $CI_CONFIG_PATH"
    - echo "CI_DEBUG_TRACE $CI_DEBUG_TRACE"
    - echo "CI_DEFAULT_BRANCH $CI_DEFAULT_BRANCH"
    - echo "CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX $CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX"
    - echo "CI_DEPENDENCY_PROXY_SERVER $CI_DEPENDENCY_PROXY_SERVER"
    - echo "CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_PASSWORD"
    - echo "CI_DEPENDENCY_PROXY_USER $CI_DEPENDENCY_PROXY_USER"
    - echo "CI_DEPLOY_FREEZE $CI_DEPLOY_FREEZE"
    - echo "CI_DEPLOY_PASSWORD $CI_DEPLOY_PASSWORD"
    - echo "CI_DEPLOY_USER $CI_DEPLOY_USER"
    - echo "CI_DISPOSABLE_ENVIRONMENT $CI_DISPOSABLE_ENVIRONMENT"
    - echo "CI_ENVIRONMENT_NAME $CI_ENVIRONMENT_NAME"
    - echo "CI_ENVIRONMENT_SLUG $CI_ENVIRONMENT_SLUG"
    - echo "CI_ENVIRONMENT_URL $CI_ENVIRONMENT_URL"
    - echo "CI_EXTERNAL_PULL_REQUEST_IID $CI_EXTERNAL_PULL_REQUEST_IID"
    - echo "CI_EXTERNAL_PULL_REQUEST_SOURCE_REPOSITORY $CI_EXTERNAL_PULL_REQUEST_SOURCE_REPOSITORY"
    - echo "CI_EXTERNAL_PULL_REQUEST_TARGET_REPOSITORY $CI_EXTERNAL_PULL_REQUEST_TARGET_REPOSITORY"
    - echo "CI_EXTERNAL_PULL_REQUEST_SOURCE_BRANCH_NAME $CI_EXTERNAL_PULL_REQUEST_SOURCE_BRANCH_NAME"
    - echo "CI_EXTERNAL_PULL_REQUEST_SOURCE_BRANCH_SHA $CI_EXTERNAL_PULL_REQUEST_SOURCE_BRANCH_SHA"
    - echo "CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME"
    - echo "CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_SHA $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_SHA"
    - echo "CI_HAS_OPEN_REQUIREMENTS $CI_HAS_OPEN_REQUIREMENTS"
    - echo "CI_OPEN_MERGE_REQUESTS $CI_OPEN_MERGE_REQUESTS"
    - echo "CI_JOB_ID $CI_JOB_ID"
    - echo "CI_JOB_IMAGE $CI_JOB_IMAGE"
    - echo "CI_JOB_MANUAL $CI_JOB_MANUAL"
    - echo "CI_JOB_NAME $CI_JOB_NAME"
    - echo "CI_JOB_STAGE $CI_JOB_STAGE"
    - echo "CI_JOB_STATUS $CI_JOB_STATUS"
    - echo "CI_JOB_TOKEN $CI_JOB_TOKEN"
    - echo "CI_JOB_JWT $CI_JOB_JWT"
    - echo "CI_JOB_URL $CI_JOB_URL"
    - echo "CI_KUBERNETES_ACTIVE $CI_KUBERNETES_ACTIVE"
    - echo "CI_MERGE_REQUEST_ASSIGNEES $CI_MERGE_REQUEST_ASSIGNEES"
    - echo "CI_MERGE_REQUEST_ID $CI_MERGE_REQUEST_ID"
    - echo "CI_MERGE_REQUEST_IID $CI_MERGE_REQUEST_IID"
    - echo "CI_MERGE_REQUEST_LABELS $CI_MERGE_REQUEST_LABELS"
    - echo "CI_MERGE_REQUEST_MILESTONE $CI_MERGE_REQUEST_MILESTONE"
    - echo "CI_MERGE_REQUEST_PROJECT_ID $CI_MERGE_REQUEST_PROJECT_ID"
    - echo "CI_MERGE_REQUEST_PROJECT_PATH $CI_MERGE_REQUEST_PROJECT_PATH"
    - echo "CI_MERGE_REQUEST_PROJECT_URL $CI_MERGE_REQUEST_PROJECT_URL"
    - echo "CI_MERGE_REQUEST_REF_PATH $CI_MERGE_REQUEST_REF_PATH"
    - echo "CI_MERGE_REQUEST_SOURCE_BRANCH_NAME $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
    - echo "CI_MERGE_REQUEST_SOURCE_BRANCH_SHA $CI_MERGE_REQUEST_SOURCE_BRANCH_SHA"
    - echo "CI_MERGE_REQUEST_SOURCE_PROJECT_ID $CI_MERGE_REQUEST_SOURCE_PROJECT_ID"
    - echo "CI_MERGE_REQUEST_SOURCE_PROJECT_PATH $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH"
    - echo "CI_MERGE_REQUEST_SOURCE_PROJECT_URL $CI_MERGE_REQUEST_SOURCE_PROJECT_URL"
    - echo "CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
    - echo "CI_MERGE_REQUEST_TARGET_BRANCH_SHA $CI_MERGE_REQUEST_TARGET_BRANCH_SHA"
    - echo "CI_MERGE_REQUEST_TITLE $CI_MERGE_REQUEST_TITLE"
    - echo "CI_MERGE_REQUEST_EVENT_TYPE $CI_MERGE_REQUEST_EVENT_TYPE"
    - echo "CI_MERGE_REQUEST_DIFF_ID $CI_MERGE_REQUEST_DIFF_ID"
    - echo "CI_MERGE_REQUEST_DIFF_BASE_SHA $CI_MERGE_REQUEST_DIFF_BASE_SHA"
    - echo "CI_NODE_INDEX $CI_NODE_INDEX"
    - echo "CI_NODE_TOTAL $CI_NODE_TOTAL"
    - echo "CI_PAGES_DOMAIN $CI_PAGES_DOMAIN"
    - echo "CI_PAGES_URL $CI_PAGES_URL"
    - echo "CI_PIPELINE_ID $CI_PIPELINE_ID"
    - echo "CI_PIPELINE_IID $CI_PIPELINE_IID"
    - echo "CI_PIPELINE_SOURCE $CI_PIPELINE_SOURCE"
    - echo "CI_PIPELINE_TRIGGERED $CI_PIPELINE_TRIGGERED"
    - echo "CI_PIPELINE_URL $CI_PIPELINE_URL"
    - echo "CI_PROJECT_CONFIG_PATH $CI_PROJECT_CONFIG_PATH"
    - echo "CI_PROJECT_DIR $CI_PROJECT_DIR"
    - echo "CI_PROJECT_ID $CI_PROJECT_ID"
    - echo "CI_PROJECT_NAME $CI_PROJECT_NAME"
    - echo "CI_PROJECT_NAMESPACE $CI_PROJECT_NAMESPACE"
    - echo "CI_PROJECT_ROOT_NAMESPACE $CI_PROJECT_ROOT_NAMESPACE"
    - echo "CI_PROJECT_PATH $CI_PROJECT_PATH"
    - echo "CI_PROJECT_PATH_SLUG $CI_PROJECT_PATH_SLUG"
    - echo "CI_PROJECT_REPOSITORY_LANGUAGES $CI_PROJECT_REPOSITORY_LANGUAGES"
    - echo "CI_PROJECT_TITLE $CI_PROJECT_TITLE"
    - echo "CI_PROJECT_URL $CI_PROJECT_URL"
    - echo "CI_PROJECT_VISIBILITY $CI_PROJECT_VISIBILITY"
    - echo "CI_REGISTRY $CI_REGISTRY"
    - echo "CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE"
    - echo "CI_REGISTRY_PASSWORD $CI_REGISTRY_PASSWORD"
    - echo "CI_REGISTRY_USER $CI_REGISTRY_USER"
    - echo "CI_REPOSITORY_URL $CI_REPOSITORY_URL"
    - echo "CI_RUNNER_DESCRIPTION $CI_RUNNER_DESCRIPTION"
    - echo "CI_RUNNER_EXECUTABLE_ARCH $CI_RUNNER_EXECUTABLE_ARCH"
    - echo "CI_RUNNER_ID $CI_RUNNER_ID"
    - echo "CI_RUNNER_REVISION $CI_RUNNER_REVISION"
    - echo "CI_RUNNER_SHORT_TOKEN $CI_RUNNER_SHORT_TOKEN"
    - echo "CI_RUNNER_TAGS $CI_RUNNER_TAGS"
    - echo "CI_RUNNER_VERSION $CI_RUNNER_VERSION"
    - echo "CI_SERVER $CI_SERVER"
    - echo "CI_SERVER_URL $CI_SERVER_URL"
    - echo "CI_SERVER_HOST $CI_SERVER_HOST"
    - echo "CI_SERVER_PORT $CI_SERVER_PORT"
    - echo "CI_SERVER_PROTOCOL $CI_SERVER_PROTOCOL"
    - echo "CI_SERVER_NAME $CI_SERVER_NAME"
    - echo "CI_SERVER_REVISION $CI_SERVER_REVISION"
    - echo "CI_SERVER_VERSION $CI_SERVER_VERSION"
    - echo "CI_SERVER_VERSION_MAJOR $CI_SERVER_VERSION_MAJOR"
    - echo "CI_SERVER_VERSION_MINOR $CI_SERVER_VERSION_MINOR"
    - echo "CI_SERVER_VERSION_PATCH $CI_SERVER_VERSION_PATCH"
    - echo "CI_SHARED_ENVIRONMENT $CI_SHARED_ENVIRONMENT"
    - echo "GITLAB_CI $GITLAB_CI"
    - echo "GITLAB_FEATURES $GITLAB_FEATURES"
    - echo "GITLAB_USER_EMAIL $GITLAB_USER_EMAIL"
    - echo "GITLAB_USER_ID $GITLAB_USER_ID"
    - echo "GITLAB_USER_LOGIN $GITLAB_USER_LOGIN"
    - echo "GITLAB_USER_NAME $GITLAB_USER_NAME"

    # Ansible refuses to read from a world-writeable folder, see https://github.com/webdevops/Dockerfile/issues/266#issuecomment-417291633
    - chmod -v 700 ansible/

    ###################################
    ### Provision the staging infra ###
    ###################################
    - ansible-playbook ansible/site.yml --skip cluster_certs
    ###################
    ### Smoke tests ###
    ###################
    - ansible-playbook ansible/smoke_tests.yml
    #########################
    ### Integration tests ###
    #########################
    #- ansible-playbook ansible/integration_tests.yml

  after_script:
    # Pre-requisites: openstack, ansible and pytest
    - pip install python-openstackclient openstacksdk "ansible>=2.9" pytest
    - apt-get update -y && apt-get install openssh-client rsync -y
    - chmod -v 700 ansible/

    # Delete the runner SSH keys
    - openstack keypair delete my_runner_key_$CI_PIPELINE_ID || true
    #################################
    ### Cleanup the staging infra ###
    #################################
    - ansible-playbook ansible/unprovision.yml
