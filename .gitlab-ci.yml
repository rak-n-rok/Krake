stages:
  - test
  - E2E


variables:
  ETCD_VER: v3.3.13
  PROMETHEUS_VER: 2.12.0

  # Change pip's cache directory to be inside the project directory since we
  # can only cache local items.
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"


# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
cache:
  paths:
    - .cache/pip


# Unit tests and flake8 are run on commits on branches which are not yet in a
# merge requests (including master), on merge requests, and on scheduled
# pipeline (night runs). Unfortunately, this configuration create duplicates
# pipelines on merge requests. Unit tests and Flake are run twice.

# It is not possible to workaround this issue. See
# https://gitlab.com/gitlab-org/gitlab-foss/issues/56632. Until workflow rules
# are added to the gitlab CI (See MR
# https://gitlab.com/gitlab-org/gitlab/merge_requests/18130), we have to work
# with duplicated pipelines on merge requests.

unittests-krake:
  stage: test
  image: python:3.6
  only:
    - tags
    - branches
    - merge_requests
    - schedules
  script:
    # Download etcd
    - mkdir /tmp/etcd-download
    - curl -s -L https://github.com/etcd-io/etcd/releases/download/$ETCD_VER/etcd-$ETCD_VER-linux-amd64.tar.gz -o /tmp/etcd.tar.gz
    - tar xzvf /tmp/etcd.tar.gz -C /tmp/etcd-download --strip-components=1
    - mv /tmp/etcd-download/etcd /usr/local/bin
    - rm -rf /tmp/etcd-download /tmp/etcd.tar.gz
    - etcd --version

    # Download prometheus
    - mkdir /tmp/prometheus-download
    - curl -s -L  https://github.com/prometheus/prometheus/releases/download/v$PROMETHEUS_VER/prometheus-$PROMETHEUS_VER.linux-amd64.tar.gz  -o /tmp/prometheus.tar.gz
    - tar xzvf /tmp/prometheus.tar.gz -C /tmp/prometheus-download --strip-components=1
    - mv /tmp/prometheus-download/prometheus /usr/local/bin
    - rm -rf /tmp/prometheus-download /tmp/prometheus.tar.gz
    - prometheus --version

    - pip install krake/[dev]
    - pip install keystone
    - pytest --runslow krake/tests
  tags:
    - docker


flake8-krake:
  stage: test
  image: python:3.6
  only:
    - tags
    - branches
    - merge_requests
    - schedules
  script:
    - pip install flake8
    - flake8 krake/krake
  tags:
    - docker


flake8-rok:
  stage: test
  image: python:3.6
  only:
    - tags
    - branches
    - merge_requests
    - schedules
  script:
    - pip install flake8
    - flake8 rok/rok
  tags:
    - docker


# Following jobs are for end to end testing. We provisioning the staging
# infrastructure, run the smoke tests and the end-to-end tests, and cleanup
# the staging infrastructure. They are run only on the master branch, on merge
# requests, and on scheduled pipeline (night runs)

E2E-tests:
  stage: E2E
  image: python:3.6
  artifacts:
    paths:
      - .ssh/id_rsa
      - ansible/.etc # Absolute path: /builds/ragnarok/krake/ansible/.etc
      - ansible/hosts
    expire_in: 1 day
    when: always
  only:
    - master
    - merge_requests
    - schedules
  variables:
    ANSIBLE_CONFIG: ansible/ansible.cfg
    ANSIBLE_INVENTORY: ansible/hosts
  script:
    - apt-get update -y
    - apt-get install -y openssh-client rsync

    - pip install python-openstackclient
    - pip install --editable rak/[test]

    # Create SSH keys for to use during the whole pipeline
    - mkdir .ssh/
    - openstack keypair delete my_runner_key_$CI_PIPELINE_ID || true
    - openstack keypair create my_runner_key_$CI_PIPELINE_ID > .ssh/id_rsa
    - chmod 600 .ssh/id_rsa

    # Configure host-CI template with the CI Pipeline ID
    - sed "s/\$CI_PIPELINE_ID/$CI_PIPELINE_ID/g" ansible/hosts-CI > ansible/hosts

    # Run Ansible to provision the staging infrastructure
    - echo "=== Provisioning staging infrastructure ==="
    # Ansible refuses to read from a world-writeable folder, see https://github.com/webdevops/Dockerfile/issues/266#issuecomment-417291633
    - chmod -v 700 ansible/
    - ansible-playbook ansible/site.yml

    - echo "=== Run smoke tests ==="
    # FIXME: This does not work because rok is not installed globally but only
    #   for the "krake" user. This makes the usage of "testinfra" really hard.
    - pytest --connection ansible --hosts krake_apps krake rak/smoke/test_krake.py
    - pytest --connection ansible --hosts minikube_clusters rak/smoke/test_minikube.py

    - echo "=== Run E2E tests ==="
    - pytest --connection ansible --hosts krake_apps rak/functionals/

  after_script:
    - pip install python-openstackclient openstacksdk ansible==2.7.10

    - apt-get update -y
    - apt-get install -y openssh-client rsync

    # Delete the runner SSH keys
    - openstack keypair delete my_runner_key_$CI_PIPELINE_ID || true

    # Delete staging infrastructure
    - chmod -v 700 ansible/
    - ansible-playbook ansible/unprovision.yml
