stages:
  - test
  - coverage
  - provision
  - smoke test
  - integration test
  - cleanup


variables:
  ETCD_VER: v3.3.13
  PROMETHEUS_VER: 2.12.0

  # Change pip's cache directory to be inside the project directory since we
  # can only cache local items.
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"


# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
cache:
  paths:
    - .cache/pip


# Unit tests and flake8 are run on commits on branches which are not yet in a
# merge requests (including master), on merge requests, and on scheduled
# pipeline (night runs). Unfortunately, this configuration create duplicates
# pipelines on merge requests. Unit tests and Flake are run twice.

# It is not possible to workaround this issue. See
# https://gitlab.com/gitlab-org/gitlab-foss/issues/56632. Until workflow rules
# are added to the gitlab CI (See MR
# https://gitlab.com/gitlab-org/gitlab/merge_requests/18130), we have to work
# with duplicated pipelines on merge requests.

.unittests-krake-template: &unittests-krake
  stage: test
  artifacts:
    paths:
      - krake/.coverage.*
  only:
    - tags
    - branches
    - merge_requests
    - schedules
  script:
    # Download etcd
    - mkdir /tmp/etcd-download
    - curl -s -L https://github.com/etcd-io/etcd/releases/download/$ETCD_VER/etcd-$ETCD_VER-linux-amd64.tar.gz -o /tmp/etcd.tar.gz
    - tar xzvf /tmp/etcd.tar.gz -C /tmp/etcd-download --strip-components=1
    - mv /tmp/etcd-download/etcd /usr/local/bin
    - rm -rf /tmp/etcd-download /tmp/etcd.tar.gz
    - etcd --version

    # Download prometheus
    - mkdir /tmp/prometheus-download
    - curl -s -L  https://github.com/prometheus/prometheus/releases/download/v$PROMETHEUS_VER/prometheus-$PROMETHEUS_VER.linux-amd64.tar.gz  -o /tmp/prometheus.tar.gz
    - tar xzvf /tmp/prometheus.tar.gz -C /tmp/prometheus-download --strip-components=1
    - mv /tmp/prometheus-download/prometheus /usr/local/bin
    - rm -rf /tmp/prometheus-download /tmp/prometheus.tar.gz
    - prometheus --version

    - pip install tox
    - tox -- --cov krake/krake --no-cov-on-fail --cov-report= --runslow krake/tests
  tags:
    - docker


unittests-krake-3.6:
  <<: *unittests-krake
  image: python:3.6
  variables:
    TOXENV: py36
    COVERAGE_FILE: krake/.coverage.py36


unittests-krake-3.7:
  <<: *unittests-krake
  image: python:3.7
  variables:
    TOXENV: py37
    COVERAGE_FILE: krake/.coverage.py37


unittests-krake-3.8:
  <<: *unittests-krake
  image: python:3.8
  variables:
    TOXENV: py38
    COVERAGE_FILE: krake/.coverage.py38


flake8-krake:
  stage: test
  image: python:3.6
  only:
    - tags
    - branches
    - merge_requests
    - schedules
  script:
    - pip install flake8
    - flake8 krake/krake
  tags:
    - docker


flake8-rok:
  stage: test
  image: python:3.6
  only:
    - tags
    - branches
    - merge_requests
    - schedules
  script:
    - pip install flake8
    - flake8 rok/rok
  tags:
    - docker


# Combine code coverage reports from previous tox runs for all different
# Python environments. Report code coverage for Krake Python package and exit
# with non-zero if the code coverage ratio is under 85%.
coverage-krake:
  stage: coverage
  image: python:3.6
  script:
    - pip install coverage
    - coverage combine krake/.coverage.*
    - coverage report --fail-under 85
  only:
    - tags
    - branches
    - merge_requests
    - schedules


# Following jobs are for end to end testing. We provisioning the staging
# infrastructure, run the smoke tests and the functional tests, and cleanup
# the staging infrastructure. They are run only on the master branch, on merge
# requests, and on scheduled pipeline (night runs)

provision-staging-infra:
  stage: provision
  image: python:3.6
  artifacts:
    paths:
      - .ssh/id_rsa
      - ansible/.etc # Absolute path: /builds/ragnarok/krake/ansible/.etc
      - ansible/hosts-CI
    expire_in: 1 day
    when: always
  only:
    - master
    - merge_requests
    - schedules
  script:
    # Pre-requisites: openstack, ansible and pytest
    - pip install python-openstackclient openstacksdk ansible==2.7.10 pytest
    - apt-get update -y && apt-get install openssh-client rsync -y

    # Create SSH keys for to use during the whole pipeline
    - mkdir .ssh/
    - openstack keypair delete --os-auth-url $OS_AUTH_URL --os-username $OS_USERNAME --os-project-name $OS_PROJECT_NAME --os-domain-name $OS_DOMAIN_NAME --os-project-domain-id $OS_PROJECT_DOMAIN_ID --os-password $OS_PASSWORD my_runner_key_$CI_PIPELINE_ID || true
    - openstack keypair create --os-auth-url $OS_AUTH_URL --os-username $OS_USERNAME --os-project-name $OS_PROJECT_NAME --os-domain-name $OS_DOMAIN_NAME --os-project-domain-id $OS_PROJECT_DOMAIN_ID --os-password $OS_PASSWORD my_runner_key_$CI_PIPELINE_ID > .ssh/id_rsa
    - chmod 600 .ssh/id_rsa

    # Configure host-CI template with the CI Pipeline ID
    - sed -i "s/\$CI_PIPELINE_ID/$CI_PIPELINE_ID/g" ansible/hosts-CI

    # Run Ansible to provision the staging infrastructure
    - echo "=== provisioning staging infrastructure ==="
    # Ansible refuses to read from a world-writeable folder, see https://github.com/webdevops/Dockerfile/issues/266#issuecomment-417291633
    - cd ansible
    - chmod -v 700 $(pwd)
    - ansible-playbook -i hosts-CI site.yml


smoke-tests:
  stage: smoke test
  image: python:3.6
  only:
    - master
    - merge_requests
    - schedules
  script:
    # Pre-requisites: Ansible
    - pip install ansible==2.7.10
    - apt-get update -y && apt-get install openssh-client rsync -y

    # Run Ansible playbook to execute smoke test on the staging infrastructure
    # Ansible refuses to read from a world-writeable folder, see https://github.com/webdevops/Dockerfile/issues/266#issuecomment-417291633
    - cd ansible
    - chmod -v 700 $(pwd)
    - ansible-playbook -i hosts-CI smoke_tests.yml


integration-tests:
  stage: integration test
  image: python:3.6
  only:
    - master
    - merge_requests
    - schedules
  script:
    # Pre-requisites: Ansible
    - pip install ansible==2.7.10
    - apt-get update -y && apt-get install openssh-client rsync -y

    # Run Ansible to execute the integration tests
    # Ansible refuses to read from a world-writeable folder, see https://github.com/webdevops/Dockerfile/issues/266#issuecomment-417291633
    - cd ansible
    - chmod -v 700 $(pwd)
    - ansible-playbook -i hosts-CI integration_tests.yml


cleanup-staging-infra:
  stage: cleanup
  image: python:3.6
  only:
    - master
    - merge_requests
    - schedules
  script:
    # Pre-requisites: OpenStack and Ansible
    - pip install python-openstackclient openstacksdk ansible==2.7.10
    - apt-get update -y && apt-get install openssh-client rsync -y

    # Delete the runner SSH keys
    - openstack keypair delete --os-auth-url $OS_AUTH_URL --os-username $OS_USERNAME --os-project-name $OS_PROJECT_NAME --os-domain-name $OS_DOMAIN_NAME --os-project-domain-id $OS_PROJECT_DOMAIN_ID --os-password $OS_PASSWORD my_runner_key_$CI_PIPELINE_ID || true

    # Delete staging infrastructure
    # Ansible refuses to read from a world-writeable folder, see https://github.com/webdevops/Dockerfile/issues/266#issuecomment-417291633
    - cd ansible
    - chmod -v 700 $(pwd)
    - ansible-playbook -i hosts-CI unprovision.yml
  when: always
